#  JSNet 90  training codes ( ImageNet dataset)
import tensorflow as tf
import numpy as np
import os
from scipy import ndimage

height = 256
width = 256
def get_weight(name,shape):
    var =tf.get_variable(name,shape,initializer=tf.contrib.layers.xavier_initializer())
    return var

def flist_loader(flist):
    imlist = []
    with open(flist, 'r') as rf:
        for line in rf.readlines():
            impath = line.strip()
            imlist.append(impath)
    return imlist

####################################################################
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
lr = 1e-5
TRAIN_MAX_STEPS = 110000
num_train_sample = 6000
batch_size = 6

'''
You can replace the dir according to your own path
logs_train_dir means the model's path
train_dir1 means the input image's path
train_dir2 means the corresponding goal JPEG images' path (input images undergoes real JPEG compression via Matlab）
itrain.txt  is the input images' path for data loading
itrain90goal.txt is the goal JPEG images' path
To get the txt, you can refer to the creat_txt_itrain.py, at the same time, you can also use other ways for data loading
'''

logs_train_dir = '/home/amax/wyq/jpegmoni/90/i90model'
train_dir1 = '/home/amax/wyq/jpegmoni/90/itrain.txt'
train_dir2 =  '/home/amax/wyq/jpegmoni/90/itrain90goal.txt'
########################################################################

#############################################################################
# standard quantization table for Y channel
kkkk=np.zeros([1,1,1,64],dtype=np.float32)
kkkk[0,0,0,:]=0.5+0.2*np.array([16, 11, 10, 16, 24, 40, 51, 61,
                      12, 12, 14, 19, 26, 58, 60, 55,
                      14, 13, 16, 24, 40, 57, 69, 56,
                      14, 17, 22, 29, 51, 87, 80, 62,
                      18, 22, 37, 56, 68, 109, 103, 77,
                      24, 35, 55, 64, 81, 104, 113, 92,
                      49, 64, 78, 87, 103, 121, 120, 101,
                      72, 92, 95, 98, 112, 100, 103, 99],dtype=np.float32)
kkkk1=tf.Variable(kkkk,trainable=False)
################################################################################
# standard quantization table for Cb and Cr channel
aaaa=np.zeros([1,1,1,64],dtype=np.float32)
aaaa[0,0,0,:]=0.5+0.2*np.array([17, 18, 24, 47, 99, 99, 99, 99,
                      18, 21, 26, 66, 99, 99, 99, 99,
                      24, 26, 56, 99, 99, 99, 99, 99,
                      47, 66, 99, 99, 99, 99, 99, 99,
                      99, 99, 99, 99, 99, 99, 99, 99,
                      99, 99, 99, 99, 99, 99, 99, 99,
                      99, 99, 99, 99, 99, 99, 99, 99,
                      99, 99, 99, 99, 99, 99, 99, 99,],dtype=np.float32)
aaaa1=tf.Variable(aaaa,trainable=False)
################################################################################
# Noise mask for Y channel
gauss_noise1= tf.Variable(tf.random_uniform([256, 256], minval=-0.5, maxval=0.5, dtype=tf.float32))
gauss1= tf.reshape(gauss_noise1,[1,32,32,64])
# Noise mask for Cb and Cr channel
gauss_noise2= tf.Variable(tf.random_uniform([128, 128], minval=-0.5, maxval=0.5, dtype=tf.float32))
gauss2= tf.reshape(gauss_noise2,[1,16,16,64])
################################################################################

train_imList1 = flist_loader(train_dir1)
train_imList2 = flist_loader(train_dir2)
Ih=tf.placeholder(tf.float32, [batch_size, height,width, 3])        # raw image
Ig=tf.placeholder(tf.float32, [batch_size, height,width, 3])        # goal JPEG image
R1, G1, B1 = tf.split(Ih, 3, 3)

# color space transform according to ITU satandard
R_new = 0.299 * R1 + 0.587 * G1 + 0.114 * B1
R_new1 = tf.maximum(R_new,0)
R = tf.minimum(R_new1,255)

G_new = -0.1687 * R1 -0.3313 * G1 + 0.5 * B1+128
G_new1 = tf.maximum(G_new,0)
G = tf.minimum(G_new1,255)

B_new = 0.5 * R1 - 0.4187 * G1 - 0.0813 * B1+128
B_new1 = tf.maximum(B_new,0)
B = tf.minimum(B_new1,255)

# Maxpooling sampling for 411
cb_mask = tf.nn.max_pool(G , [1,2,2,1] , [1,2,2,1] , padding='VALID')
# cb_mask = tf.image.pad_to_bounding_box(poolingG,0,0,256,256)
cr_mask = tf.nn.max_pool(B , [1,2,2,1] , [1,2,2,1] , padding='VALID')
# cr_mask = tf.image.pad_to_bounding_box(poolingB,0,0,256,256)

#  split the image into 8*8 patches for encoding
R_batch= tf.extract_image_patches(images=R, ksizes=[1, 8, 8, 1], strides=[1, 8, 8, 1], rates=[1, 1, 1, 1],padding='VALID')
G_batch= tf.extract_image_patches(images=cb_mask, ksizes=[1, 8, 8, 1], strides=[1, 8, 8, 1], rates=[1, 1, 1, 1],padding='VALID')
B_batch= tf.extract_image_patches(images=cr_mask, ksizes=[1, 8, 8, 1], strides=[1, 8, 8, 1], rates=[1, 1, 1, 1],padding='VALID')

################################################# R 通道 ################################################
#  DCT transformation simulation
kernel1_1 = get_weight('kernel1_1',[1, 1, 64, 64])
conv1_1 = tf.nn.conv2d(R_batch, kernel1_1, strides=[1, 1, 1, 1], padding='SAME')
# 3D noise-mask quantization
kernel2_1 = tf.div(conv1_1,kkkk1)
kernel3_1 = kernel2_1 + gauss1

# IDCT transformation simulation
kernel4_1 = tf.multiply(kernel3_1,kkkk1)

# put the patches together to get the whole image (simulating decoding)
kernel5_1 = get_weight('kernel5_1',[1, 1, 64, 64])
conv5_1 = tf.nn.conv2d(kernel4_1, kernel5_1, strides=[1, 1, 1, 1], padding='SAME')

k = tf.reshape(conv5_1,[batch_size,1024,8,8])

k1 = tf.concat([k[:, 0, :, :], k[:, 1, :, :]], 2)
k2 = tf.concat([k[:, 2, :, :], k[:, 3, :, :]], 2)
k3 = tf.concat([k[:, 4, :, :], k[:, 5, :, :]], 2)
k4 = tf.concat([k[:, 6, :, :], k[:, 7, :, :]], 2)
k5 = tf.concat([k[:, 8, :, :], k[:, 9, :, :]], 2)
k6 = tf.concat([k[:, 10, :, :], k[:, 11, :, :]], 2)
k7 = tf.concat([k[:, 12, :, :], k[:, 13, :, :]], 2)
k8 = tf.concat([k[:, 14, :, :], k[:, 15, :, :]], 2)
k9 = tf.concat([k[:, 16, :, :], k[:, 17, :, :]], 2)
k10 = tf.concat([k[:, 18, :, :], k[:, 19, :, :]], 2)
k11 = tf.concat([k[:, 20, :, :], k[:, 21, :, :]], 2)
k12 = tf.concat([k[:, 22, :, :], k[:, 23, :, :]], 2)
k13 = tf.concat([k[:, 24, :, :], k[:, 25, :, :]], 2)
k14 = tf.concat([k[:, 26, :, :], k[:, 27, :, :]], 2)
k15 = tf.concat([k[:, 28, :, :], k[:, 29, :, :]], 2)
k16 = tf.concat([k[:, 30, :, :], k[:, 31, :, :]], 2)
k17 = tf.concat([k[:, 32, :, :], k[:, 33, :, :]], 2)
k18 = tf.concat([k[:, 34, :, :], k[:, 35, :, :]], 2)
k19 = tf.concat([k[:, 36, :, :], k[:, 37, :, :]], 2)
k20 = tf.concat([k[:, 38, :, :], k[:, 39, :, :]], 2)
k21 = tf.concat([k[:, 40, :, :], k[:, 41, :, :]], 2)
k22 = tf.concat([k[:, 42, :, :], k[:, 43, :, :]], 2)
k23 = tf.concat([k[:, 44, :, :], k[:, 45, :, :]], 2)
k24 = tf.concat([k[:, 46, :, :], k[:, 47, :, :]], 2)
k25 = tf.concat([k[:, 48, :, :], k[:, 49, :, :]], 2)
k26 = tf.concat([k[:, 50, :, :], k[:, 51, :, :]], 2)
k27 = tf.concat([k[:, 52, :, :], k[:, 53, :, :]], 2)
k28 = tf.concat([k[:, 54, :, :], k[:, 55, :, :]], 2)
k29 = tf.concat([k[:, 56, :, :], k[:, 57, :, :]], 2)
k30 = tf.concat([k[:, 58, :, :], k[:, 59, :, :]], 2)
k31 = tf.concat([k[:, 60, :, :], k[:, 61, :, :]], 2)
k32 = tf.concat([k[:, 62, :, :], k[:, 63, :, :]], 2)
k33 = tf.concat([k[:, 64, :, :], k[:, 65, :, :]], 2)
k34 = tf.concat([k[:, 66, :, :], k[:, 67, :, :]], 2)
k35 = tf.concat([k[:, 68, :, :], k[:, 69, :, :]], 2)
k36 = tf.concat([k[:, 70, :, :], k[:, 71, :, :]], 2)
k37 = tf.concat([k[:, 72, :, :], k[:, 73, :, :]], 2)
k38 = tf.concat([k[:, 74, :, :], k[:, 75, :, :]], 2)
k39 = tf.concat([k[:, 76, :, :], k[:, 77, :, :]], 2)
k40 = tf.concat([k[:, 78, :, :], k[:, 79, :, :]], 2)
k41 = tf.concat([k[:, 80, :, :], k[:, 81, :, :]], 2)
k42 = tf.concat([k[:, 82, :, :], k[:, 83, :, :]], 2)
k43 = tf.concat([k[:, 84, :, :], k[:, 85, :, :]], 2)
k44 = tf.concat([k[:, 86, :, :], k[:, 87, :, :]], 2)
k45 = tf.concat([k[:, 88, :, :], k[:, 89, :, :]], 2)
k46 = tf.concat([k[:, 90, :, :], k[:, 91, :, :]], 2)
k47 = tf.concat([k[:, 92, :, :], k[:, 93, :, :]], 2)
k48 = tf.concat([k[:, 94, :, :], k[:, 95, :, :]], 2)
k49 = tf.concat([k[:, 96, :, :], k[:, 97, :, :]], 2)
k50 = tf.concat([k[:, 98, :, :], k[:, 99, :, :]], 2)
k51 = tf.concat([k[:, 100, :, :], k[:, 101, :, :]], 2)
k52 = tf.concat([k[:, 102, :, :], k[:, 103, :, :]], 2)
k53 = tf.concat([k[:, 104, :, :], k[:, 105, :, :]], 2)
k54 = tf.concat([k[:, 106, :, :], k[:, 107, :, :]], 2)
k55 = tf.concat([k[:, 108, :, :], k[:, 109, :, :]], 2)
k56 = tf.concat([k[:, 110, :, :], k[:, 111, :, :]], 2)
k57 = tf.concat([k[:, 112, :, :], k[:, 113, :, :]], 2)
k58 = tf.concat([k[:, 114, :, :], k[:, 115, :, :]], 2)
k59 = tf.concat([k[:, 116, :, :], k[:, 117, :, :]], 2)
k60 = tf.concat([k[:, 118, :, :], k[:, 119, :, :]], 2)
k61 = tf.concat([k[:, 120, :, :], k[:, 121, :, :]], 2)
k62 = tf.concat([k[:, 122, :, :], k[:, 123, :, :]], 2)
k63 = tf.concat([k[:, 124, :, :], k[:, 125, :, :]], 2)
k64 = tf.concat([k[:, 126, :, :], k[:, 127, :, :]], 2)
k65 = tf.concat([k[:, 128, :, :], k[:, 129, :, :]], 2)
k66 = tf.concat([k[:, 130, :, :], k[:, 131, :, :]], 2)
k67 = tf.concat([k[:, 132, :, :], k[:, 133, :, :]], 2)
k68 = tf.concat([k[:, 134, :, :], k[:, 135, :, :]], 2)
k69 = tf.concat([k[:, 136, :, :], k[:, 137, :, :]], 2)
k70 = tf.concat([k[:, 138, :, :], k[:, 139, :, :]], 2)
k71 = tf.concat([k[:, 140, :, :], k[:, 141, :, :]], 2)
k72 = tf.concat([k[:, 142, :, :], k[:, 143, :, :]], 2)
k73 = tf.concat([k[:, 144, :, :], k[:, 145, :, :]], 2)
k74 = tf.concat([k[:, 146, :, :], k[:, 147, :, :]], 2)
k75 = tf.concat([k[:, 148, :, :], k[:, 149, :, :]], 2)
k76 = tf.concat([k[:, 150, :, :], k[:, 151, :, :]], 2)
k77 = tf.concat([k[:, 152, :, :], k[:, 153, :, :]], 2)
k78 = tf.concat([k[:, 154, :, :], k[:, 155, :, :]], 2)
k79 = tf.concat([k[:, 156, :, :], k[:, 157, :, :]], 2)
k80 = tf.concat([k[:, 158, :, :], k[:, 159, :, :]], 2)
k81 = tf.concat([k[:, 160, :, :], k[:, 161, :, :]], 2)
k82 = tf.concat([k[:, 162, :, :], k[:, 163, :, :]], 2)
k83 = tf.concat([k[:, 164, :, :], k[:, 165, :, :]], 2)
k84 = tf.concat([k[:, 166, :, :], k[:, 167, :, :]], 2)
k85 = tf.concat([k[:, 168, :, :], k[:, 169, :, :]], 2)
k86 = tf.concat([k[:, 170, :, :], k[:, 171, :, :]], 2)
k87 = tf.concat([k[:, 172, :, :], k[:, 173, :, :]], 2)
k88 = tf.concat([k[:, 174, :, :], k[:, 175, :, :]], 2)
k89 = tf.concat([k[:, 176, :, :], k[:, 177, :, :]], 2)
k90 = tf.concat([k[:, 178, :, :], k[:, 179, :, :]], 2)
k91 = tf.concat([k[:, 180, :, :], k[:, 181, :, :]], 2)
k92 = tf.concat([k[:, 182, :, :], k[:, 183, :, :]], 2)
k93 = tf.concat([k[:, 184, :, :], k[:, 185, :, :]], 2)
k94 = tf.concat([k[:, 186, :, :], k[:, 187, :, :]], 2)
k95 = tf.concat([k[:, 188, :, :], k[:, 189, :, :]], 2)
k96 = tf.concat([k[:, 190, :, :], k[:, 191, :, :]], 2)
k97 = tf.concat([k[:, 192, :, :], k[:, 193, :, :]], 2)
k98 = tf.concat([k[:, 194, :, :], k[:, 195, :, :]], 2)
k99 = tf.concat([k[:, 196, :, :], k[:, 197, :, :]], 2)
k100 = tf.concat([k[:, 198, :, :], k[:, 199, :, :]], 2)
k101 = tf.concat([k[:, 200, :, :], k[:, 201, :, :]], 2)
k102 = tf.concat([k[:, 202, :, :], k[:, 203, :, :]], 2)
k103 = tf.concat([k[:, 204, :, :], k[:, 205, :, :]], 2)
k104 = tf.concat([k[:, 206, :, :], k[:, 207, :, :]], 2)
k105 = tf.concat([k[:, 208, :, :], k[:, 209, :, :]], 2)
k106 = tf.concat([k[:, 210, :, :], k[:, 211, :, :]], 2)
k107 = tf.concat([k[:, 212, :, :], k[:, 213, :, :]], 2)
k108 = tf.concat([k[:, 214, :, :], k[:, 215, :, :]], 2)
k109 = tf.concat([k[:, 216, :, :], k[:, 217, :, :]], 2)
k110 = tf.concat([k[:, 218, :, :], k[:, 219, :, :]], 2)
k111 = tf.concat([k[:, 220, :, :], k[:, 221, :, :]], 2)
k112 = tf.concat([k[:, 222, :, :], k[:, 223, :, :]], 2)
k113 = tf.concat([k[:, 224, :, :], k[:, 225, :, :]], 2)
k114 = tf.concat([k[:, 226, :, :], k[:, 227, :, :]], 2)
k115 = tf.concat([k[:, 228, :, :], k[:, 229, :, :]], 2)
k116 = tf.concat([k[:, 230, :, :], k[:, 231, :, :]], 2)
k117 = tf.concat([k[:, 232, :, :], k[:, 233, :, :]], 2)
k118 = tf.concat([k[:, 234, :, :], k[:, 235, :, :]], 2)
k119 = tf.concat([k[:, 236, :, :], k[:, 237, :, :]], 2)
k120 = tf.concat([k[:, 238, :, :], k[:, 239, :, :]], 2)
k121 = tf.concat([k[:, 240, :, :], k[:, 241, :, :]], 2)
k122 = tf.concat([k[:, 242, :, :], k[:, 243, :, :]], 2)
k123 = tf.concat([k[:, 244, :, :], k[:, 245, :, :]], 2)
k124 = tf.concat([k[:, 246, :, :], k[:, 247, :, :]], 2)
k125 = tf.concat([k[:, 248, :, :], k[:, 249, :, :]], 2)
k126 = tf.concat([k[:, 250, :, :], k[:, 251, :, :]], 2)
k127 = tf.concat([k[:, 252, :, :], k[:, 253, :, :]], 2)
k128 = tf.concat([k[:, 254, :, :], k[:, 255, :, :]], 2)
k129 = tf.concat([k[:, 256, :, :], k[:, 257, :, :]], 2)
k130 = tf.concat([k[:, 258, :, :], k[:, 259, :, :]], 2)
k131 = tf.concat([k[:, 260, :, :], k[:, 261, :, :]], 2)
k132 = tf.concat([k[:, 262, :, :], k[:, 263, :, :]], 2)
k133 = tf.concat([k[:, 264, :, :], k[:, 265, :, :]], 2)
k134 = tf.concat([k[:, 266, :, :], k[:, 267, :, :]], 2)
k135 = tf.concat([k[:, 268, :, :], k[:, 269, :, :]], 2)
k136 = tf.concat([k[:, 270, :, :], k[:, 271, :, :]], 2)
k137 = tf.concat([k[:, 272, :, :], k[:, 273, :, :]], 2)
k138 = tf.concat([k[:, 274, :, :], k[:, 275, :, :]], 2)
k139 = tf.concat([k[:, 276, :, :], k[:, 277, :, :]], 2)
k140 = tf.concat([k[:, 278, :, :], k[:, 279, :, :]], 2)
k141 = tf.concat([k[:, 280, :, :], k[:, 281, :, :]], 2)
k142 = tf.concat([k[:, 282, :, :], k[:, 283, :, :]], 2)
k143 = tf.concat([k[:, 284, :, :], k[:, 285, :, :]], 2)
k144 = tf.concat([k[:, 286, :, :], k[:, 287, :, :]], 2)
k145 = tf.concat([k[:, 288, :, :], k[:, 289, :, :]], 2)
k146 = tf.concat([k[:, 290, :, :], k[:, 291, :, :]], 2)
k147 = tf.concat([k[:, 292, :, :], k[:, 293, :, :]], 2)
k148 = tf.concat([k[:, 294, :, :], k[:, 295, :, :]], 2)
k149 = tf.concat([k[:, 296, :, :], k[:, 297, :, :]], 2)
k150 = tf.concat([k[:, 298, :, :], k[:, 299, :, :]], 2)
k151 = tf.concat([k[:, 300, :, :], k[:, 301, :, :]], 2)
k152 = tf.concat([k[:, 302, :, :], k[:, 303, :, :]], 2)
k153 = tf.concat([k[:, 304, :, :], k[:, 305, :, :]], 2)
k154 = tf.concat([k[:, 306, :, :], k[:, 307, :, :]], 2)
k155 = tf.concat([k[:, 308, :, :], k[:, 309, :, :]], 2)
k156 = tf.concat([k[:, 310, :, :], k[:, 311, :, :]], 2)
k157 = tf.concat([k[:, 312, :, :], k[:, 313, :, :]], 2)
k158 = tf.concat([k[:, 314, :, :], k[:, 315, :, :]], 2)
k159 = tf.concat([k[:, 316, :, :], k[:, 317, :, :]], 2)
k160 = tf.concat([k[:, 318, :, :], k[:, 319, :, :]], 2)
k161 = tf.concat([k[:, 320, :, :], k[:, 321, :, :]], 2)
k162 = tf.concat([k[:, 322, :, :], k[:, 323, :, :]], 2)
k163 = tf.concat([k[:, 324, :, :], k[:, 325, :, :]], 2)
k164 = tf.concat([k[:, 326, :, :], k[:, 327, :, :]], 2)
k165 = tf.concat([k[:, 328, :, :], k[:, 329, :, :]], 2)
k166 = tf.concat([k[:, 330, :, :], k[:, 331, :, :]], 2)
k167 = tf.concat([k[:, 332, :, :], k[:, 333, :, :]], 2)
k168 = tf.concat([k[:, 334, :, :], k[:, 335, :, :]], 2)
k169 = tf.concat([k[:, 336, :, :], k[:, 337, :, :]], 2)
k170 = tf.concat([k[:, 338, :, :], k[:, 339, :, :]], 2)
k171 = tf.concat([k[:, 340, :, :], k[:, 341, :, :]], 2)
k172 = tf.concat([k[:, 342, :, :], k[:, 343, :, :]], 2)
k173 = tf.concat([k[:, 344, :, :], k[:, 345, :, :]], 2)
k174 = tf.concat([k[:, 346, :, :], k[:, 347, :, :]], 2)
k175 = tf.concat([k[:, 348, :, :], k[:, 349, :, :]], 2)
k176 = tf.concat([k[:, 350, :, :], k[:, 351, :, :]], 2)
k177 = tf.concat([k[:, 352, :, :], k[:, 353, :, :]], 2)
k178 = tf.concat([k[:, 354, :, :], k[:, 355, :, :]], 2)
k179 = tf.concat([k[:, 356, :, :], k[:, 357, :, :]], 2)
k180 = tf.concat([k[:, 358, :, :], k[:, 359, :, :]], 2)
k181 = tf.concat([k[:, 360, :, :], k[:, 361, :, :]], 2)
k182 = tf.concat([k[:, 362, :, :], k[:, 363, :, :]], 2)
k183 = tf.concat([k[:, 364, :, :], k[:, 365, :, :]], 2)
k184 = tf.concat([k[:, 366, :, :], k[:, 367, :, :]], 2)
k185 = tf.concat([k[:, 368, :, :], k[:, 369, :, :]], 2)
k186 = tf.concat([k[:, 370, :, :], k[:, 371, :, :]], 2)
k187 = tf.concat([k[:, 372, :, :], k[:, 373, :, :]], 2)
k188 = tf.concat([k[:, 374, :, :], k[:, 375, :, :]], 2)
k189 = tf.concat([k[:, 376, :, :], k[:, 377, :, :]], 2)
k190 = tf.concat([k[:, 378, :, :], k[:, 379, :, :]], 2)
k191 = tf.concat([k[:, 380, :, :], k[:, 381, :, :]], 2)
k192 = tf.concat([k[:, 382, :, :], k[:, 383, :, :]], 2)
k193 = tf.concat([k[:, 384, :, :], k[:, 385, :, :]], 2)
k194 = tf.concat([k[:, 386, :, :], k[:, 387, :, :]], 2)
k195 = tf.concat([k[:, 388, :, :], k[:, 389, :, :]], 2)
k196 = tf.concat([k[:, 390, :, :], k[:, 391, :, :]], 2)
k197 = tf.concat([k[:, 392, :, :], k[:, 393, :, :]], 2)
k198 = tf.concat([k[:, 394, :, :], k[:, 395, :, :]], 2)
k199 = tf.concat([k[:, 396, :, :], k[:, 397, :, :]], 2)
k200 = tf.concat([k[:, 398, :, :], k[:, 399, :, :]], 2)
k201 = tf.concat([k[:, 400, :, :], k[:, 401, :, :]], 2)
k202 = tf.concat([k[:, 402, :, :], k[:, 403, :, :]], 2)
k203 = tf.concat([k[:, 404, :, :], k[:, 405, :, :]], 2)
k204 = tf.concat([k[:, 406, :, :], k[:, 407, :, :]], 2)
k205 = tf.concat([k[:, 408, :, :], k[:, 409, :, :]], 2)
k206 = tf.concat([k[:, 410, :, :], k[:, 411, :, :]], 2)
k207 = tf.concat([k[:, 412, :, :], k[:, 413, :, :]], 2)
k208 = tf.concat([k[:, 414, :, :], k[:, 415, :, :]], 2)
k209 = tf.concat([k[:, 416, :, :], k[:, 417, :, :]], 2)
k210 = tf.concat([k[:, 418, :, :], k[:, 419, :, :]], 2)
k211 = tf.concat([k[:, 420, :, :], k[:, 421, :, :]], 2)
k212 = tf.concat([k[:, 422, :, :], k[:, 423, :, :]], 2)
k213 = tf.concat([k[:, 424, :, :], k[:, 425, :, :]], 2)
k214 = tf.concat([k[:, 426, :, :], k[:, 427, :, :]], 2)
k215 = tf.concat([k[:, 428, :, :], k[:, 429, :, :]], 2)
k216 = tf.concat([k[:, 430, :, :], k[:, 431, :, :]], 2)
k217 = tf.concat([k[:, 432, :, :], k[:, 433, :, :]], 2)
k218 = tf.concat([k[:, 434, :, :], k[:, 435, :, :]], 2)
k219 = tf.concat([k[:, 436, :, :], k[:, 437, :, :]], 2)
k220 = tf.concat([k[:, 438, :, :], k[:, 439, :, :]], 2)
k221 = tf.concat([k[:, 440, :, :], k[:, 441, :, :]], 2)
k222 = tf.concat([k[:, 442, :, :], k[:, 443, :, :]], 2)
k223 = tf.concat([k[:, 444, :, :], k[:, 445, :, :]], 2)
k224 = tf.concat([k[:, 446, :, :], k[:, 447, :, :]], 2)
k225 = tf.concat([k[:, 448, :, :], k[:, 449, :, :]], 2)
k226 = tf.concat([k[:, 450, :, :], k[:, 451, :, :]], 2)
k227 = tf.concat([k[:, 452, :, :], k[:, 453, :, :]], 2)
k228 = tf.concat([k[:, 454, :, :], k[:, 455, :, :]], 2)
k229 = tf.concat([k[:, 456, :, :], k[:, 457, :, :]], 2)
k230 = tf.concat([k[:, 458, :, :], k[:, 459, :, :]], 2)
k231 = tf.concat([k[:, 460, :, :], k[:, 461, :, :]], 2)
k232 = tf.concat([k[:, 462, :, :], k[:, 463, :, :]], 2)
k233 = tf.concat([k[:, 464, :, :], k[:, 465, :, :]], 2)
k234 = tf.concat([k[:, 466, :, :], k[:, 467, :, :]], 2)
k235 = tf.concat([k[:, 468, :, :], k[:, 469, :, :]], 2)
k236 = tf.concat([k[:, 470, :, :], k[:, 471, :, :]], 2)
k237 = tf.concat([k[:, 472, :, :], k[:, 473, :, :]], 2)
k238 = tf.concat([k[:, 474, :, :], k[:, 475, :, :]], 2)
k239 = tf.concat([k[:, 476, :, :], k[:, 477, :, :]], 2)
k240 = tf.concat([k[:, 478, :, :], k[:, 479, :, :]], 2)
k241 = tf.concat([k[:, 480, :, :], k[:, 481, :, :]], 2)
k242 = tf.concat([k[:, 482, :, :], k[:, 483, :, :]], 2)
k243 = tf.concat([k[:, 484, :, :], k[:, 485, :, :]], 2)
k244 = tf.concat([k[:, 486, :, :], k[:, 487, :, :]], 2)
k245 = tf.concat([k[:, 488, :, :], k[:, 489, :, :]], 2)
k246 = tf.concat([k[:, 490, :, :], k[:, 491, :, :]], 2)
k247 = tf.concat([k[:, 492, :, :], k[:, 493, :, :]], 2)
k248 = tf.concat([k[:, 494, :, :], k[:, 495, :, :]], 2)
k249 = tf.concat([k[:, 496, :, :], k[:, 497, :, :]], 2)
k250 = tf.concat([k[:, 498, :, :], k[:, 499, :, :]], 2)
k251 = tf.concat([k[:, 500, :, :], k[:, 501, :, :]], 2)
k252 = tf.concat([k[:, 502, :, :], k[:, 503, :, :]], 2)
k253 = tf.concat([k[:, 504, :, :], k[:, 505, :, :]], 2)
k254 = tf.concat([k[:, 506, :, :], k[:, 507, :, :]], 2)
k255 = tf.concat([k[:, 508, :, :], k[:, 509, :, :]], 2)
k256 = tf.concat([k[:, 510, :, :], k[:, 511, :, :]], 2)
k257 = tf.concat([k[:, 512, :, :], k[:, 513, :, :]], 2)
k258 = tf.concat([k[:, 514, :, :], k[:, 515, :, :]], 2)
k259 = tf.concat([k[:, 516, :, :], k[:, 517, :, :]], 2)
k260 = tf.concat([k[:, 518, :, :], k[:, 519, :, :]], 2)
k261 = tf.concat([k[:, 520, :, :], k[:, 521, :, :]], 2)
k262 = tf.concat([k[:, 522, :, :], k[:, 523, :, :]], 2)
k263 = tf.concat([k[:, 524, :, :], k[:, 525, :, :]], 2)
k264 = tf.concat([k[:, 526, :, :], k[:, 527, :, :]], 2)
k265 = tf.concat([k[:, 528, :, :], k[:, 529, :, :]], 2)
k266 = tf.concat([k[:, 530, :, :], k[:, 531, :, :]], 2)
k267 = tf.concat([k[:, 532, :, :], k[:, 533, :, :]], 2)
k268 = tf.concat([k[:, 534, :, :], k[:, 535, :, :]], 2)
k269 = tf.concat([k[:, 536, :, :], k[:, 537, :, :]], 2)
k270 = tf.concat([k[:, 538, :, :], k[:, 539, :, :]], 2)
k271 = tf.concat([k[:, 540, :, :], k[:, 541, :, :]], 2)
k272 = tf.concat([k[:, 542, :, :], k[:, 543, :, :]], 2)
k273 = tf.concat([k[:, 544, :, :], k[:, 545, :, :]], 2)
k274 = tf.concat([k[:, 546, :, :], k[:, 547, :, :]], 2)
k275 = tf.concat([k[:, 548, :, :], k[:, 549, :, :]], 2)
k276 = tf.concat([k[:, 550, :, :], k[:, 551, :, :]], 2)
k277 = tf.concat([k[:, 552, :, :], k[:, 553, :, :]], 2)
k278 = tf.concat([k[:, 554, :, :], k[:, 555, :, :]], 2)
k279 = tf.concat([k[:, 556, :, :], k[:, 557, :, :]], 2)
k280 = tf.concat([k[:, 558, :, :], k[:, 559, :, :]], 2)
k281 = tf.concat([k[:, 560, :, :], k[:, 561, :, :]], 2)
k282 = tf.concat([k[:, 562, :, :], k[:, 563, :, :]], 2)
k283 = tf.concat([k[:, 564, :, :], k[:, 565, :, :]], 2)
k284 = tf.concat([k[:, 566, :, :], k[:, 567, :, :]], 2)
k285 = tf.concat([k[:, 568, :, :], k[:, 569, :, :]], 2)
k286 = tf.concat([k[:, 570, :, :], k[:, 571, :, :]], 2)
k287 = tf.concat([k[:, 572, :, :], k[:, 573, :, :]], 2)
k288 = tf.concat([k[:, 574, :, :], k[:, 575, :, :]], 2)
k289 = tf.concat([k[:, 576, :, :], k[:, 577, :, :]], 2)
k290 = tf.concat([k[:, 578, :, :], k[:, 579, :, :]], 2)
k291 = tf.concat([k[:, 580, :, :], k[:, 581, :, :]], 2)
k292 = tf.concat([k[:, 582, :, :], k[:, 583, :, :]], 2)
k293 = tf.concat([k[:, 584, :, :], k[:, 585, :, :]], 2)
k294 = tf.concat([k[:, 586, :, :], k[:, 587, :, :]], 2)
k295 = tf.concat([k[:, 588, :, :], k[:, 589, :, :]], 2)
k296 = tf.concat([k[:, 590, :, :], k[:, 591, :, :]], 2)
k297 = tf.concat([k[:, 592, :, :], k[:, 593, :, :]], 2)
k298 = tf.concat([k[:, 594, :, :], k[:, 595, :, :]], 2)
k299 = tf.concat([k[:, 596, :, :], k[:, 597, :, :]], 2)
k300 = tf.concat([k[:, 598, :, :], k[:, 599, :, :]], 2)
k301 = tf.concat([k[:, 600, :, :], k[:, 601, :, :]], 2)
k302 = tf.concat([k[:, 602, :, :], k[:, 603, :, :]], 2)
k303 = tf.concat([k[:, 604, :, :], k[:, 605, :, :]], 2)
k304 = tf.concat([k[:, 606, :, :], k[:, 607, :, :]], 2)
k305 = tf.concat([k[:, 608, :, :], k[:, 609, :, :]], 2)
k306 = tf.concat([k[:, 610, :, :], k[:, 611, :, :]], 2)
k307 = tf.concat([k[:, 612, :, :], k[:, 613, :, :]], 2)
k308 = tf.concat([k[:, 614, :, :], k[:, 615, :, :]], 2)
k309 = tf.concat([k[:, 616, :, :], k[:, 617, :, :]], 2)
k310 = tf.concat([k[:, 618, :, :], k[:, 619, :, :]], 2)
k311 = tf.concat([k[:, 620, :, :], k[:, 621, :, :]], 2)
k312 = tf.concat([k[:, 622, :, :], k[:, 623, :, :]], 2)
k313 = tf.concat([k[:, 624, :, :], k[:, 625, :, :]], 2)
k314 = tf.concat([k[:, 626, :, :], k[:, 627, :, :]], 2)
k315 = tf.concat([k[:, 628, :, :], k[:, 629, :, :]], 2)
k316 = tf.concat([k[:, 630, :, :], k[:, 631, :, :]], 2)
k317 = tf.concat([k[:, 632, :, :], k[:, 633, :, :]], 2)
k318 = tf.concat([k[:, 634, :, :], k[:, 635, :, :]], 2)
k319 = tf.concat([k[:, 636, :, :], k[:, 637, :, :]], 2)
k320 = tf.concat([k[:, 638, :, :], k[:, 639, :, :]], 2)
k321 = tf.concat([k[:, 640, :, :], k[:, 641, :, :]], 2)
k322 = tf.concat([k[:, 642, :, :], k[:, 643, :, :]], 2)
k323 = tf.concat([k[:, 644, :, :], k[:, 645, :, :]], 2)
k324 = tf.concat([k[:, 646, :, :], k[:, 647, :, :]], 2)
k325 = tf.concat([k[:, 648, :, :], k[:, 649, :, :]], 2)
k326 = tf.concat([k[:, 650, :, :], k[:, 651, :, :]], 2)
k327 = tf.concat([k[:, 652, :, :], k[:, 653, :, :]], 2)
k328 = tf.concat([k[:, 654, :, :], k[:, 655, :, :]], 2)
k329 = tf.concat([k[:, 656, :, :], k[:, 657, :, :]], 2)
k330 = tf.concat([k[:, 658, :, :], k[:, 659, :, :]], 2)
k331 = tf.concat([k[:, 660, :, :], k[:, 661, :, :]], 2)
k332 = tf.concat([k[:, 662, :, :], k[:, 663, :, :]], 2)
k333 = tf.concat([k[:, 664, :, :], k[:, 665, :, :]], 2)
k334 = tf.concat([k[:, 666, :, :], k[:, 667, :, :]], 2)
k335 = tf.concat([k[:, 668, :, :], k[:, 669, :, :]], 2)
k336 = tf.concat([k[:, 670, :, :], k[:, 671, :, :]], 2)
k337 = tf.concat([k[:, 672, :, :], k[:, 673, :, :]], 2)
k338 = tf.concat([k[:, 674, :, :], k[:, 675, :, :]], 2)
k339 = tf.concat([k[:, 676, :, :], k[:, 677, :, :]], 2)
k340 = tf.concat([k[:, 678, :, :], k[:, 679, :, :]], 2)
k341 = tf.concat([k[:, 680, :, :], k[:, 681, :, :]], 2)
k342 = tf.concat([k[:, 682, :, :], k[:, 683, :, :]], 2)
k343 = tf.concat([k[:, 684, :, :], k[:, 685, :, :]], 2)
k344 = tf.concat([k[:, 686, :, :], k[:, 687, :, :]], 2)
k345 = tf.concat([k[:, 688, :, :], k[:, 689, :, :]], 2)
k346 = tf.concat([k[:, 690, :, :], k[:, 691, :, :]], 2)
k347 = tf.concat([k[:, 692, :, :], k[:, 693, :, :]], 2)
k348 = tf.concat([k[:, 694, :, :], k[:, 695, :, :]], 2)
k349 = tf.concat([k[:, 696, :, :], k[:, 697, :, :]], 2)
k350 = tf.concat([k[:, 698, :, :], k[:, 699, :, :]], 2)
k351 = tf.concat([k[:, 700, :, :], k[:, 701, :, :]], 2)
k352 = tf.concat([k[:, 702, :, :], k[:, 703, :, :]], 2)
k353 = tf.concat([k[:, 704, :, :], k[:, 705, :, :]], 2)
k354 = tf.concat([k[:, 706, :, :], k[:, 707, :, :]], 2)
k355 = tf.concat([k[:, 708, :, :], k[:, 709, :, :]], 2)
k356 = tf.concat([k[:, 710, :, :], k[:, 711, :, :]], 2)
k357 = tf.concat([k[:, 712, :, :], k[:, 713, :, :]], 2)
k358 = tf.concat([k[:, 714, :, :], k[:, 715, :, :]], 2)
k359 = tf.concat([k[:, 716, :, :], k[:, 717, :, :]], 2)
k360 = tf.concat([k[:, 718, :, :], k[:, 719, :, :]], 2)
k361 = tf.concat([k[:, 720, :, :], k[:, 721, :, :]], 2)
k362 = tf.concat([k[:, 722, :, :], k[:, 723, :, :]], 2)
k363 = tf.concat([k[:, 724, :, :], k[:, 725, :, :]], 2)
k364 = tf.concat([k[:, 726, :, :], k[:, 727, :, :]], 2)
k365 = tf.concat([k[:, 728, :, :], k[:, 729, :, :]], 2)
k366 = tf.concat([k[:, 730, :, :], k[:, 731, :, :]], 2)
k367 = tf.concat([k[:, 732, :, :], k[:, 733, :, :]], 2)
k368 = tf.concat([k[:, 734, :, :], k[:, 735, :, :]], 2)
k369 = tf.concat([k[:, 736, :, :], k[:, 737, :, :]], 2)
k370 = tf.concat([k[:, 738, :, :], k[:, 739, :, :]], 2)
k371 = tf.concat([k[:, 740, :, :], k[:, 741, :, :]], 2)
k372 = tf.concat([k[:, 742, :, :], k[:, 743, :, :]], 2)
k373 = tf.concat([k[:, 744, :, :], k[:, 745, :, :]], 2)
k374 = tf.concat([k[:, 746, :, :], k[:, 747, :, :]], 2)
k375 = tf.concat([k[:, 748, :, :], k[:, 749, :, :]], 2)
k376 = tf.concat([k[:, 750, :, :], k[:, 751, :, :]], 2)
k377 = tf.concat([k[:, 752, :, :], k[:, 753, :, :]], 2)
k378 = tf.concat([k[:, 754, :, :], k[:, 755, :, :]], 2)
k379 = tf.concat([k[:, 756, :, :], k[:, 757, :, :]], 2)
k380 = tf.concat([k[:, 758, :, :], k[:, 759, :, :]], 2)
k381 = tf.concat([k[:, 760, :, :], k[:, 761, :, :]], 2)
k382 = tf.concat([k[:, 762, :, :], k[:, 763, :, :]], 2)
k383 = tf.concat([k[:, 764, :, :], k[:, 765, :, :]], 2)
k384 = tf.concat([k[:, 766, :, :], k[:, 767, :, :]], 2)
k385 = tf.concat([k[:, 768, :, :], k[:, 769, :, :]], 2)
k386 = tf.concat([k[:, 770, :, :], k[:, 771, :, :]], 2)
k387 = tf.concat([k[:, 772, :, :], k[:, 773, :, :]], 2)
k388 = tf.concat([k[:, 774, :, :], k[:, 775, :, :]], 2)
k389 = tf.concat([k[:, 776, :, :], k[:, 777, :, :]], 2)
k390 = tf.concat([k[:, 778, :, :], k[:, 779, :, :]], 2)
k391 = tf.concat([k[:, 780, :, :], k[:, 781, :, :]], 2)
k392 = tf.concat([k[:, 782, :, :], k[:, 783, :, :]], 2)
k393 = tf.concat([k[:, 784, :, :], k[:, 785, :, :]], 2)
k394 = tf.concat([k[:, 786, :, :], k[:, 787, :, :]], 2)
k395 = tf.concat([k[:, 788, :, :], k[:, 789, :, :]], 2)
k396 = tf.concat([k[:, 790, :, :], k[:, 791, :, :]], 2)
k397 = tf.concat([k[:, 792, :, :], k[:, 793, :, :]], 2)
k398 = tf.concat([k[:, 794, :, :], k[:, 795, :, :]], 2)
k399 = tf.concat([k[:, 796, :, :], k[:, 797, :, :]], 2)
k400 = tf.concat([k[:, 798, :, :], k[:, 799, :, :]], 2)
k401 = tf.concat([k[:, 800, :, :], k[:, 801, :, :]], 2)
k402 = tf.concat([k[:, 802, :, :], k[:, 803, :, :]], 2)
k403 = tf.concat([k[:, 804, :, :], k[:, 805, :, :]], 2)
k404 = tf.concat([k[:, 806, :, :], k[:, 807, :, :]], 2)
k405 = tf.concat([k[:, 808, :, :], k[:, 809, :, :]], 2)
k406 = tf.concat([k[:, 810, :, :], k[:, 811, :, :]], 2)
k407 = tf.concat([k[:, 812, :, :], k[:, 813, :, :]], 2)
k408 = tf.concat([k[:, 814, :, :], k[:, 815, :, :]], 2)
k409 = tf.concat([k[:, 816, :, :], k[:, 817, :, :]], 2)
k410 = tf.concat([k[:, 818, :, :], k[:, 819, :, :]], 2)
k411 = tf.concat([k[:, 820, :, :], k[:, 821, :, :]], 2)
k412 = tf.concat([k[:, 822, :, :], k[:, 823, :, :]], 2)
k413 = tf.concat([k[:, 824, :, :], k[:, 825, :, :]], 2)
k414 = tf.concat([k[:, 826, :, :], k[:, 827, :, :]], 2)
k415 = tf.concat([k[:, 828, :, :], k[:, 829, :, :]], 2)
k416 = tf.concat([k[:, 830, :, :], k[:, 831, :, :]], 2)
k417 = tf.concat([k[:, 832, :, :], k[:, 833, :, :]], 2)
k418 = tf.concat([k[:, 834, :, :], k[:, 835, :, :]], 2)
k419 = tf.concat([k[:, 836, :, :], k[:, 837, :, :]], 2)
k420 = tf.concat([k[:, 838, :, :], k[:, 839, :, :]], 2)
k421 = tf.concat([k[:, 840, :, :], k[:, 841, :, :]], 2)
k422 = tf.concat([k[:, 842, :, :], k[:, 843, :, :]], 2)
k423 = tf.concat([k[:, 844, :, :], k[:, 845, :, :]], 2)
k424 = tf.concat([k[:, 846, :, :], k[:, 847, :, :]], 2)
k425 = tf.concat([k[:, 848, :, :], k[:, 849, :, :]], 2)
k426 = tf.concat([k[:, 850, :, :], k[:, 851, :, :]], 2)
k427 = tf.concat([k[:, 852, :, :], k[:, 853, :, :]], 2)
k428 = tf.concat([k[:, 854, :, :], k[:, 855, :, :]], 2)
k429 = tf.concat([k[:, 856, :, :], k[:, 857, :, :]], 2)
k430 = tf.concat([k[:, 858, :, :], k[:, 859, :, :]], 2)
k431 = tf.concat([k[:, 860, :, :], k[:, 861, :, :]], 2)
k432 = tf.concat([k[:, 862, :, :], k[:, 863, :, :]], 2)
k433 = tf.concat([k[:, 864, :, :], k[:, 865, :, :]], 2)
k434 = tf.concat([k[:, 866, :, :], k[:, 867, :, :]], 2)
k435 = tf.concat([k[:, 868, :, :], k[:, 869, :, :]], 2)
k436 = tf.concat([k[:, 870, :, :], k[:, 871, :, :]], 2)
k437 = tf.concat([k[:, 872, :, :], k[:, 873, :, :]], 2)
k438 = tf.concat([k[:, 874, :, :], k[:, 875, :, :]], 2)
k439 = tf.concat([k[:, 876, :, :], k[:, 877, :, :]], 2)
k440 = tf.concat([k[:, 878, :, :], k[:, 879, :, :]], 2)
k441 = tf.concat([k[:, 880, :, :], k[:, 881, :, :]], 2)
k442 = tf.concat([k[:, 882, :, :], k[:, 883, :, :]], 2)
k443 = tf.concat([k[:, 884, :, :], k[:, 885, :, :]], 2)
k444 = tf.concat([k[:, 886, :, :], k[:, 887, :, :]], 2)
k445 = tf.concat([k[:, 888, :, :], k[:, 889, :, :]], 2)
k446 = tf.concat([k[:, 890, :, :], k[:, 891, :, :]], 2)
k447 = tf.concat([k[:, 892, :, :], k[:, 893, :, :]], 2)
k448 = tf.concat([k[:, 894, :, :], k[:, 895, :, :]], 2)
k449 = tf.concat([k[:, 896, :, :], k[:, 897, :, :]], 2)
k450 = tf.concat([k[:, 898, :, :], k[:, 899, :, :]], 2)
k451 = tf.concat([k[:, 900, :, :], k[:, 901, :, :]], 2)
k452 = tf.concat([k[:, 902, :, :], k[:, 903, :, :]], 2)
k453 = tf.concat([k[:, 904, :, :], k[:, 905, :, :]], 2)
k454 = tf.concat([k[:, 906, :, :], k[:, 907, :, :]], 2)
k455 = tf.concat([k[:, 908, :, :], k[:, 909, :, :]], 2)
k456 = tf.concat([k[:, 910, :, :], k[:, 911, :, :]], 2)
k457 = tf.concat([k[:, 912, :, :], k[:, 913, :, :]], 2)
k458 = tf.concat([k[:, 914, :, :], k[:, 915, :, :]], 2)
k459 = tf.concat([k[:, 916, :, :], k[:, 917, :, :]], 2)
k460 = tf.concat([k[:, 918, :, :], k[:, 919, :, :]], 2)
k461 = tf.concat([k[:, 920, :, :], k[:, 921, :, :]], 2)
k462 = tf.concat([k[:, 922, :, :], k[:, 923, :, :]], 2)
k463 = tf.concat([k[:, 924, :, :], k[:, 925, :, :]], 2)
k464 = tf.concat([k[:, 926, :, :], k[:, 927, :, :]], 2)
k465 = tf.concat([k[:, 928, :, :], k[:, 929, :, :]], 2)
k466 = tf.concat([k[:, 930, :, :], k[:, 931, :, :]], 2)
k467 = tf.concat([k[:, 932, :, :], k[:, 933, :, :]], 2)
k468 = tf.concat([k[:, 934, :, :], k[:, 935, :, :]], 2)
k469 = tf.concat([k[:, 936, :, :], k[:, 937, :, :]], 2)
k470 = tf.concat([k[:, 938, :, :], k[:, 939, :, :]], 2)
k471 = tf.concat([k[:, 940, :, :], k[:, 941, :, :]], 2)
k472 = tf.concat([k[:, 942, :, :], k[:, 943, :, :]], 2)
k473 = tf.concat([k[:, 944, :, :], k[:, 945, :, :]], 2)
k474 = tf.concat([k[:, 946, :, :], k[:, 947, :, :]], 2)
k475 = tf.concat([k[:, 948, :, :], k[:, 949, :, :]], 2)
k476 = tf.concat([k[:, 950, :, :], k[:, 951, :, :]], 2)
k477 = tf.concat([k[:, 952, :, :], k[:, 953, :, :]], 2)
k478 = tf.concat([k[:, 954, :, :], k[:, 955, :, :]], 2)
k479 = tf.concat([k[:, 956, :, :], k[:, 957, :, :]], 2)
k480 = tf.concat([k[:, 958, :, :], k[:, 959, :, :]], 2)
k481 = tf.concat([k[:, 960, :, :], k[:, 961, :, :]], 2)
k482 = tf.concat([k[:, 962, :, :], k[:, 963, :, :]], 2)
k483 = tf.concat([k[:, 964, :, :], k[:, 965, :, :]], 2)
k484 = tf.concat([k[:, 966, :, :], k[:, 967, :, :]], 2)
k485 = tf.concat([k[:, 968, :, :], k[:, 969, :, :]], 2)
k486 = tf.concat([k[:, 970, :, :], k[:, 971, :, :]], 2)
k487 = tf.concat([k[:, 972, :, :], k[:, 973, :, :]], 2)
k488 = tf.concat([k[:, 974, :, :], k[:, 975, :, :]], 2)
k489 = tf.concat([k[:, 976, :, :], k[:, 977, :, :]], 2)
k490 = tf.concat([k[:, 978, :, :], k[:, 979, :, :]], 2)
k491 = tf.concat([k[:, 980, :, :], k[:, 981, :, :]], 2)
k492 = tf.concat([k[:, 982, :, :], k[:, 983, :, :]], 2)
k493 = tf.concat([k[:, 984, :, :], k[:, 985, :, :]], 2)
k494 = tf.concat([k[:, 986, :, :], k[:, 987, :, :]], 2)
k495 = tf.concat([k[:, 988, :, :], k[:, 989, :, :]], 2)
k496 = tf.concat([k[:, 990, :, :], k[:, 991, :, :]], 2)
k497 = tf.concat([k[:, 992, :, :], k[:, 993, :, :]], 2)
k498 = tf.concat([k[:, 994, :, :], k[:, 995, :, :]], 2)
k499 = tf.concat([k[:, 996, :, :], k[:, 997, :, :]], 2)
k500 = tf.concat([k[:, 998, :, :], k[:, 999, :, :]], 2)
k501 = tf.concat([k[:, 1000, :, :], k[:, 1001, :, :]], 2)
k502 = tf.concat([k[:, 1002, :, :], k[:, 1003, :, :]], 2)
k503 = tf.concat([k[:, 1004, :, :], k[:, 1005, :, :]], 2)
k504 = tf.concat([k[:, 1006, :, :], k[:, 1007, :, :]], 2)
k505 = tf.concat([k[:, 1008, :, :], k[:, 1009, :, :]], 2)
k506 = tf.concat([k[:, 1010, :, :], k[:, 1011, :, :]], 2)
k507 = tf.concat([k[:, 1012, :, :], k[:, 1013, :, :]], 2)
k508 = tf.concat([k[:, 1014, :, :], k[:, 1015, :, :]], 2)
k509 = tf.concat([k[:, 1016, :, :], k[:, 1017, :, :]], 2)
k510 = tf.concat([k[:, 1018, :, :], k[:, 1019, :, :]], 2)
k511 = tf.concat([k[:, 1020, :, :], k[:, 1021, :, :]], 2)
k512 = tf.concat([k[:, 1022, :, :], k[:, 1023, :, :]], 2)

m1 = tf.concat([k1, k2], 2)
m2 = tf.concat([k3, k4], 2)
m3 = tf.concat([k5, k6], 2)
m4 = tf.concat([k7, k8], 2)
m5 = tf.concat([k9, k10], 2)
m6 = tf.concat([k11, k12], 2)
m7 = tf.concat([k13, k14], 2)
m8 = tf.concat([k15, k16], 2)
m9 = tf.concat([k17, k18], 2)
m10 = tf.concat([k19, k20], 2)
m11 = tf.concat([k21, k22], 2)
m12 = tf.concat([k23, k24], 2)
m13 = tf.concat([k25, k26], 2)
m14 = tf.concat([k27, k28], 2)
m15 = tf.concat([k29, k30], 2)
m16 = tf.concat([k31, k32], 2)
m17 = tf.concat([k33, k34], 2)
m18 = tf.concat([k35, k36], 2)
m19 = tf.concat([k37, k38], 2)
m20 = tf.concat([k39, k40], 2)
m21 = tf.concat([k41, k42], 2)
m22 = tf.concat([k43, k44], 2)
m23 = tf.concat([k45, k46], 2)
m24 = tf.concat([k47, k48], 2)
m25 = tf.concat([k49, k50], 2)
m26 = tf.concat([k51, k52], 2)
m27 = tf.concat([k53, k54], 2)
m28 = tf.concat([k55, k56], 2)
m29 = tf.concat([k57, k58], 2)
m30 = tf.concat([k59, k60], 2)
m31 = tf.concat([k61, k62], 2)
m32 = tf.concat([k63, k64], 2)
m33 = tf.concat([k65, k66], 2)
m34 = tf.concat([k67, k68], 2)
m35 = tf.concat([k69, k70], 2)
m36 = tf.concat([k71, k72], 2)
m37 = tf.concat([k73, k74], 2)
m38 = tf.concat([k75, k76], 2)
m39 = tf.concat([k77, k78], 2)
m40 = tf.concat([k79, k80], 2)
m41 = tf.concat([k81, k82], 2)
m42 = tf.concat([k83, k84], 2)
m43 = tf.concat([k85, k86], 2)
m44 = tf.concat([k87, k88], 2)
m45 = tf.concat([k89, k90], 2)
m46 = tf.concat([k91, k92], 2)
m47 = tf.concat([k93, k94], 2)
m48 = tf.concat([k95, k96], 2)
m49 = tf.concat([k97, k98], 2)
m50 = tf.concat([k99, k100], 2)
m51 = tf.concat([k101, k102], 2)
m52 = tf.concat([k103, k104], 2)
m53 = tf.concat([k105, k106], 2)
m54 = tf.concat([k107, k108], 2)
m55 = tf.concat([k109, k110], 2)
m56 = tf.concat([k111, k112], 2)
m57 = tf.concat([k113, k114], 2)
m58 = tf.concat([k115, k116], 2)
m59 = tf.concat([k117, k118], 2)
m60 = tf.concat([k119, k120], 2)
m61 = tf.concat([k121, k122], 2)
m62 = tf.concat([k123, k124], 2)
m63 = tf.concat([k125, k126], 2)
m64 = tf.concat([k127, k128], 2)
m65 = tf.concat([k129, k130], 2)
m66 = tf.concat([k131, k132], 2)
m67 = tf.concat([k133, k134], 2)
m68 = tf.concat([k135, k136], 2)
m69 = tf.concat([k137, k138], 2)
m70 = tf.concat([k139, k140], 2)
m71 = tf.concat([k141, k142], 2)
m72 = tf.concat([k143, k144], 2)
m73 = tf.concat([k145, k146], 2)
m74 = tf.concat([k147, k148], 2)
m75 = tf.concat([k149, k150], 2)
m76 = tf.concat([k151, k152], 2)
m77 = tf.concat([k153, k154], 2)
m78 = tf.concat([k155, k156], 2)
m79 = tf.concat([k157, k158], 2)
m80 = tf.concat([k159, k160], 2)
m81 = tf.concat([k161, k162], 2)
m82 = tf.concat([k163, k164], 2)
m83 = tf.concat([k165, k166], 2)
m84 = tf.concat([k167, k168], 2)
m85 = tf.concat([k169, k170], 2)
m86 = tf.concat([k171, k172], 2)
m87 = tf.concat([k173, k174], 2)
m88 = tf.concat([k175, k176], 2)
m89 = tf.concat([k177, k178], 2)
m90 = tf.concat([k179, k180], 2)
m91 = tf.concat([k181, k182], 2)
m92 = tf.concat([k183, k184], 2)
m93 = tf.concat([k185, k186], 2)
m94 = tf.concat([k187, k188], 2)
m95 = tf.concat([k189, k190], 2)
m96 = tf.concat([k191, k192], 2)
m97 = tf.concat([k193, k194], 2)
m98 = tf.concat([k195, k196], 2)
m99 = tf.concat([k197, k198], 2)
m100 = tf.concat([k199, k200], 2)
m101 = tf.concat([k201, k202], 2)
m102 = tf.concat([k203, k204], 2)
m103 = tf.concat([k205, k206], 2)
m104 = tf.concat([k207, k208], 2)
m105 = tf.concat([k209, k210], 2)
m106 = tf.concat([k211, k212], 2)
m107 = tf.concat([k213, k214], 2)
m108 = tf.concat([k215, k216], 2)
m109 = tf.concat([k217, k218], 2)
m110 = tf.concat([k219, k220], 2)
m111 = tf.concat([k221, k222], 2)
m112 = tf.concat([k223, k224], 2)
m113 = tf.concat([k225, k226], 2)
m114 = tf.concat([k227, k228], 2)
m115 = tf.concat([k229, k230], 2)
m116 = tf.concat([k231, k232], 2)
m117 = tf.concat([k233, k234], 2)
m118 = tf.concat([k235, k236], 2)
m119 = tf.concat([k237, k238], 2)
m120 = tf.concat([k239, k240], 2)
m121 = tf.concat([k241, k242], 2)
m122 = tf.concat([k243, k244], 2)
m123 = tf.concat([k245, k246], 2)
m124 = tf.concat([k247, k248], 2)
m125 = tf.concat([k249, k250], 2)
m126 = tf.concat([k251, k252], 2)
m127 = tf.concat([k253, k254], 2)
m128 = tf.concat([k255, k256], 2)
m129 = tf.concat([k257, k258], 2)
m130 = tf.concat([k259, k260], 2)
m131 = tf.concat([k261, k262], 2)
m132 = tf.concat([k263, k264], 2)
m133 = tf.concat([k265, k266], 2)
m134 = tf.concat([k267, k268], 2)
m135 = tf.concat([k269, k270], 2)
m136 = tf.concat([k271, k272], 2)
m137 = tf.concat([k273, k274], 2)
m138 = tf.concat([k275, k276], 2)
m139 = tf.concat([k277, k278], 2)
m140 = tf.concat([k279, k280], 2)
m141 = tf.concat([k281, k282], 2)
m142 = tf.concat([k283, k284], 2)
m143 = tf.concat([k285, k286], 2)
m144 = tf.concat([k287, k288], 2)
m145 = tf.concat([k289, k290], 2)
m146 = tf.concat([k291, k292], 2)
m147 = tf.concat([k293, k294], 2)
m148 = tf.concat([k295, k296], 2)
m149 = tf.concat([k297, k298], 2)
m150 = tf.concat([k299, k300], 2)
m151 = tf.concat([k301, k302], 2)
m152 = tf.concat([k303, k304], 2)
m153 = tf.concat([k305, k306], 2)
m154 = tf.concat([k307, k308], 2)
m155 = tf.concat([k309, k310], 2)
m156 = tf.concat([k311, k312], 2)
m157 = tf.concat([k313, k314], 2)
m158 = tf.concat([k315, k316], 2)
m159 = tf.concat([k317, k318], 2)
m160 = tf.concat([k319, k320], 2)
m161 = tf.concat([k321, k322], 2)
m162 = tf.concat([k323, k324], 2)
m163 = tf.concat([k325, k326], 2)
m164 = tf.concat([k327, k328], 2)
m165 = tf.concat([k329, k330], 2)
m166 = tf.concat([k331, k332], 2)
m167 = tf.concat([k333, k334], 2)
m168 = tf.concat([k335, k336], 2)
m169 = tf.concat([k337, k338], 2)
m170 = tf.concat([k339, k340], 2)
m171 = tf.concat([k341, k342], 2)
m172 = tf.concat([k343, k344], 2)
m173 = tf.concat([k345, k346], 2)
m174 = tf.concat([k347, k348], 2)
m175 = tf.concat([k349, k350], 2)
m176 = tf.concat([k351, k352], 2)
m177 = tf.concat([k353, k354], 2)
m178 = tf.concat([k355, k356], 2)
m179 = tf.concat([k357, k358], 2)
m180 = tf.concat([k359, k360], 2)
m181 = tf.concat([k361, k362], 2)
m182 = tf.concat([k363, k364], 2)
m183 = tf.concat([k365, k366], 2)
m184 = tf.concat([k367, k368], 2)
m185 = tf.concat([k369, k370], 2)
m186 = tf.concat([k371, k372], 2)
m187 = tf.concat([k373, k374], 2)
m188 = tf.concat([k375, k376], 2)
m189 = tf.concat([k377, k378], 2)
m190 = tf.concat([k379, k380], 2)
m191 = tf.concat([k381, k382], 2)
m192 = tf.concat([k383, k384], 2)
m193 = tf.concat([k385, k386], 2)
m194 = tf.concat([k387, k388], 2)
m195 = tf.concat([k389, k390], 2)
m196 = tf.concat([k391, k392], 2)
m197 = tf.concat([k393, k394], 2)
m198 = tf.concat([k395, k396], 2)
m199 = tf.concat([k397, k398], 2)
m200 = tf.concat([k399, k400], 2)
m201 = tf.concat([k401, k402], 2)
m202 = tf.concat([k403, k404], 2)
m203 = tf.concat([k405, k406], 2)
m204 = tf.concat([k407, k408], 2)
m205 = tf.concat([k409, k410], 2)
m206 = tf.concat([k411, k412], 2)
m207 = tf.concat([k413, k414], 2)
m208 = tf.concat([k415, k416], 2)
m209 = tf.concat([k417, k418], 2)
m210 = tf.concat([k419, k420], 2)
m211 = tf.concat([k421, k422], 2)
m212 = tf.concat([k423, k424], 2)
m213 = tf.concat([k425, k426], 2)
m214 = tf.concat([k427, k428], 2)
m215 = tf.concat([k429, k430], 2)
m216 = tf.concat([k431, k432], 2)
m217 = tf.concat([k433, k434], 2)
m218 = tf.concat([k435, k436], 2)
m219 = tf.concat([k437, k438], 2)
m220 = tf.concat([k439, k440], 2)
m221 = tf.concat([k441, k442], 2)
m222 = tf.concat([k443, k444], 2)
m223 = tf.concat([k445, k446], 2)
m224 = tf.concat([k447, k448], 2)
m225 = tf.concat([k449, k450], 2)
m226 = tf.concat([k451, k452], 2)
m227 = tf.concat([k453, k454], 2)
m228 = tf.concat([k455, k456], 2)
m229 = tf.concat([k457, k458], 2)
m230 = tf.concat([k459, k460], 2)
m231 = tf.concat([k461, k462], 2)
m232 = tf.concat([k463, k464], 2)
m233 = tf.concat([k465, k466], 2)
m234 = tf.concat([k467, k468], 2)
m235 = tf.concat([k469, k470], 2)
m236 = tf.concat([k471, k472], 2)
m237 = tf.concat([k473, k474], 2)
m238 = tf.concat([k475, k476], 2)
m239 = tf.concat([k477, k478], 2)
m240 = tf.concat([k479, k480], 2)
m241 = tf.concat([k481, k482], 2)
m242 = tf.concat([k483, k484], 2)
m243 = tf.concat([k485, k486], 2)
m244 = tf.concat([k487, k488], 2)
m245 = tf.concat([k489, k490], 2)
m246 = tf.concat([k491, k492], 2)
m247 = tf.concat([k493, k494], 2)
m248 = tf.concat([k495, k496], 2)
m249 = tf.concat([k497, k498], 2)
m250 = tf.concat([k499, k500], 2)
m251 = tf.concat([k501, k502], 2)
m252 = tf.concat([k503, k504], 2)
m253 = tf.concat([k505, k506], 2)
m254 = tf.concat([k507, k508], 2)
m255 = tf.concat([k509, k510], 2)
m256 = tf.concat([k511, k512], 2)

n1 = tf.concat([m1, m2], 2)
n2 = tf.concat([m3, m4], 2)
n3 = tf.concat([m5, m6], 2)
n4 = tf.concat([m7, m8], 2)
n5 = tf.concat([m9, m10], 2)
n6 = tf.concat([m11, m12], 2)
n7 = tf.concat([m13, m14], 2)
n8 = tf.concat([m15, m16], 2)
n9 = tf.concat([m17, m18], 2)
n10 = tf.concat([m19, m20], 2)
n11 = tf.concat([m21, m22], 2)
n12 = tf.concat([m23, m24], 2)
n13 = tf.concat([m25, m26], 2)
n14 = tf.concat([m27, m28], 2)
n15 = tf.concat([m29, m30], 2)
n16 = tf.concat([m31, m32], 2)
n17 = tf.concat([m33, m34], 2)
n18 = tf.concat([m35, m36], 2)
n19 = tf.concat([m37, m38], 2)
n20 = tf.concat([m39, m40], 2)
n21 = tf.concat([m41, m42], 2)
n22 = tf.concat([m43, m44], 2)
n23 = tf.concat([m45, m46], 2)
n24 = tf.concat([m47, m48], 2)
n25 = tf.concat([m49, m50], 2)
n26 = tf.concat([m51, m52], 2)
n27 = tf.concat([m53, m54], 2)
n28 = tf.concat([m55, m56], 2)
n29 = tf.concat([m57, m58], 2)
n30 = tf.concat([m59, m60], 2)
n31 = tf.concat([m61, m62], 2)
n32 = tf.concat([m63, m64], 2)
n33 = tf.concat([m65, m66], 2)
n34 = tf.concat([m67, m68], 2)
n35 = tf.concat([m69, m70], 2)
n36 = tf.concat([m71, m72], 2)
n37 = tf.concat([m73, m74], 2)
n38 = tf.concat([m75, m76], 2)
n39 = tf.concat([m77, m78], 2)
n40 = tf.concat([m79, m80], 2)
n41 = tf.concat([m81, m82], 2)
n42 = tf.concat([m83, m84], 2)
n43 = tf.concat([m85, m86], 2)
n44 = tf.concat([m87, m88], 2)
n45 = tf.concat([m89, m90], 2)
n46 = tf.concat([m91, m92], 2)
n47 = tf.concat([m93, m94], 2)
n48 = tf.concat([m95, m96], 2)
n49 = tf.concat([m97, m98], 2)
n50 = tf.concat([m99, m100], 2)
n51 = tf.concat([m101, m102], 2)
n52 = tf.concat([m103, m104], 2)
n53 = tf.concat([m105, m106], 2)
n54 = tf.concat([m107, m108], 2)
n55 = tf.concat([m109, m110], 2)
n56 = tf.concat([m111, m112], 2)
n57 = tf.concat([m113, m114], 2)
n58 = tf.concat([m115, m116], 2)
n59 = tf.concat([m117, m118], 2)
n60 = tf.concat([m119, m120], 2)
n61 = tf.concat([m121, m122], 2)
n62 = tf.concat([m123, m124], 2)
n63 = tf.concat([m125, m126], 2)
n64 = tf.concat([m127, m128], 2)
n65 = tf.concat([m129, m130], 2)
n66 = tf.concat([m131, m132], 2)
n67 = tf.concat([m133, m134], 2)
n68 = tf.concat([m135, m136], 2)
n69 = tf.concat([m137, m138], 2)
n70 = tf.concat([m139, m140], 2)
n71 = tf.concat([m141, m142], 2)
n72 = tf.concat([m143, m144], 2)
n73 = tf.concat([m145, m146], 2)
n74 = tf.concat([m147, m148], 2)
n75 = tf.concat([m149, m150], 2)
n76 = tf.concat([m151, m152], 2)
n77 = tf.concat([m153, m154], 2)
n78 = tf.concat([m155, m156], 2)
n79 = tf.concat([m157, m158], 2)
n80 = tf.concat([m159, m160], 2)
n81 = tf.concat([m161, m162], 2)
n82 = tf.concat([m163, m164], 2)
n83 = tf.concat([m165, m166], 2)
n84 = tf.concat([m167, m168], 2)
n85 = tf.concat([m169, m170], 2)
n86 = tf.concat([m171, m172], 2)
n87 = tf.concat([m173, m174], 2)
n88 = tf.concat([m175, m176], 2)
n89 = tf.concat([m177, m178], 2)
n90 = tf.concat([m179, m180], 2)
n91 = tf.concat([m181, m182], 2)
n92 = tf.concat([m183, m184], 2)
n93 = tf.concat([m185, m186], 2)
n94 = tf.concat([m187, m188], 2)
n95 = tf.concat([m189, m190], 2)
n96 = tf.concat([m191, m192], 2)
n97 = tf.concat([m193, m194], 2)
n98 = tf.concat([m195, m196], 2)
n99 = tf.concat([m197, m198], 2)
n100 = tf.concat([m199, m200], 2)
n101 = tf.concat([m201, m202], 2)
n102 = tf.concat([m203, m204], 2)
n103 = tf.concat([m205, m206], 2)
n104 = tf.concat([m207, m208], 2)
n105 = tf.concat([m209, m210], 2)
n106 = tf.concat([m211, m212], 2)
n107 = tf.concat([m213, m214], 2)
n108 = tf.concat([m215, m216], 2)
n109 = tf.concat([m217, m218], 2)
n110 = tf.concat([m219, m220], 2)
n111 = tf.concat([m221, m222], 2)
n112 = tf.concat([m223, m224], 2)
n113 = tf.concat([m225, m226], 2)
n114 = tf.concat([m227, m228], 2)
n115 = tf.concat([m229, m230], 2)
n116 = tf.concat([m231, m232], 2)
n117 = tf.concat([m233, m234], 2)
n118 = tf.concat([m235, m236], 2)
n119 = tf.concat([m237, m238], 2)
n120 = tf.concat([m239, m240], 2)
n121 = tf.concat([m241, m242], 2)
n122 = tf.concat([m243, m244], 2)
n123 = tf.concat([m245, m246], 2)
n124 = tf.concat([m247, m248], 2)
n125 = tf.concat([m249, m250], 2)
n126 = tf.concat([m251, m252], 2)
n127 = tf.concat([m253, m254], 2)
n128 = tf.concat([m255, m256], 2)

p1 = tf.concat([n1, n2], 2)
p2 = tf.concat([n3, n4], 2)
p3 = tf.concat([n5, n6], 2)
p4 = tf.concat([n7, n8], 2)
p5 = tf.concat([n9, n10], 2)
p6 = tf.concat([n11, n12], 2)
p7 = tf.concat([n13, n14], 2)
p8 = tf.concat([n15, n16], 2)
p9 = tf.concat([n17, n18], 2)
p10 = tf.concat([n19, n20], 2)
p11 = tf.concat([n21, n22], 2)
p12 = tf.concat([n23, n24], 2)
p13 = tf.concat([n25, n26], 2)
p14 = tf.concat([n27, n28], 2)
p15 = tf.concat([n29, n30], 2)
p16 = tf.concat([n31, n32], 2)
p17 = tf.concat([n33, n34], 2)
p18 = tf.concat([n35, n36], 2)
p19 = tf.concat([n37, n38], 2)
p20 = tf.concat([n39, n40], 2)
p21 = tf.concat([n41, n42], 2)
p22 = tf.concat([n43, n44], 2)
p23 = tf.concat([n45, n46], 2)
p24 = tf.concat([n47, n48], 2)
p25 = tf.concat([n49, n50], 2)
p26 = tf.concat([n51, n52], 2)
p27 = tf.concat([n53, n54], 2)
p28 = tf.concat([n55, n56], 2)
p29 = tf.concat([n57, n58], 2)
p30 = tf.concat([n59, n60], 2)
p31 = tf.concat([n61, n62], 2)
p32 = tf.concat([n63, n64], 2)
p33 = tf.concat([n65, n66], 2)
p34 = tf.concat([n67, n68], 2)
p35 = tf.concat([n69, n70], 2)
p36 = tf.concat([n71, n72], 2)
p37 = tf.concat([n73, n74], 2)
p38 = tf.concat([n75, n76], 2)
p39 = tf.concat([n77, n78], 2)
p40 = tf.concat([n79, n80], 2)
p41 = tf.concat([n81, n82], 2)
p42 = tf.concat([n83, n84], 2)
p43 = tf.concat([n85, n86], 2)
p44 = tf.concat([n87, n88], 2)
p45 = tf.concat([n89, n90], 2)
p46 = tf.concat([n91, n92], 2)
p47 = tf.concat([n93, n94], 2)
p48 = tf.concat([n95, n96], 2)
p49 = tf.concat([n97, n98], 2)
p50 = tf.concat([n99, n100], 2)
p51 = tf.concat([n101, n102], 2)
p52 = tf.concat([n103, n104], 2)
p53 = tf.concat([n105, n106], 2)
p54 = tf.concat([n107, n108], 2)
p55 = tf.concat([n109, n110], 2)
p56 = tf.concat([n111, n112], 2)
p57 = tf.concat([n113, n114], 2)
p58 = tf.concat([n115, n116], 2)
p59 = tf.concat([n117, n118], 2)
p60 = tf.concat([n119, n120], 2)
p61 = tf.concat([n121, n122], 2)
p62 = tf.concat([n123, n124], 2)
p63 = tf.concat([n125, n126], 2)
p64 = tf.concat([n127, n128], 2)

q1 = tf.concat([p1, p2], 2)
q2 = tf.concat([p3, p4], 2)
q3 = tf.concat([p5, p6], 2)
q4 = tf.concat([p7, p8], 2)
q5 = tf.concat([p9, p10], 2)
q6 = tf.concat([p11, p12], 2)
q7 = tf.concat([p13, p14], 2)
q8 = tf.concat([p15, p16], 2)
q9 = tf.concat([p17, p18], 2)
q10 = tf.concat([p19, p20], 2)
q11 = tf.concat([p21, p22], 2)
q12 = tf.concat([p23, p24], 2)
q13 = tf.concat([p25, p26], 2)
q14 = tf.concat([p27, p28], 2)
q15 = tf.concat([p29, p30], 2)
q16 = tf.concat([p31, p32], 2)
q17 = tf.concat([p33, p34], 2)
q18 = tf.concat([p35, p36], 2)
q19 = tf.concat([p37, p38], 2)
q20 = tf.concat([p39, p40], 2)
q21 = tf.concat([p41, p42], 2)
q22 = tf.concat([p43, p44], 2)
q23 = tf.concat([p45, p46], 2)
q24 = tf.concat([p47, p48], 2)
q25 = tf.concat([p49, p50], 2)
q26 = tf.concat([p51, p52], 2)
q27 = tf.concat([p53, p54], 2)
q28 = tf.concat([p55, p56], 2)
q29 = tf.concat([p57, p58], 2)
q30 = tf.concat([p59, p60], 2)
q31 = tf.concat([p61, p62], 2)
q32 = tf.concat([p63, p64], 2)

r1 = tf.concat([q1, q2], 1)
r2 = tf.concat([q3, q4], 1)
r3 = tf.concat([q5, q6], 1)
r4 = tf.concat([q7, q8], 1)
r5 = tf.concat([q9, q10], 1)
r6 = tf.concat([q11, q12], 1)
r7 = tf.concat([q13, q14], 1)
r8 = tf.concat([q15, q16], 1)
r9 = tf.concat([q17, q18], 1)
r10 = tf.concat([q19, q20], 1)
r11 = tf.concat([q21, q22], 1)
r12 = tf.concat([q23, q24], 1)
r13 = tf.concat([q25, q26], 1)
r14 = tf.concat([q27, q28], 1)
r15 = tf.concat([q29, q30], 1)
r16 = tf.concat([q31, q32], 1)

s1 = tf.concat([r1, r2], 1)
s2 = tf.concat([r3, r4], 1)
s3 = tf.concat([r5, r6], 1)
s4 = tf.concat([r7, r8], 1)
s5 = tf.concat([r9, r10], 1)
s6 = tf.concat([r11, r12], 1)
s7 = tf.concat([r13, r14], 1)
s8 = tf.concat([r15, r16], 1)

y1 = tf.concat([s1, s2], 1)
y2 = tf.concat([s3, s4], 1)
y3 = tf.concat([s5, s6], 1)
y4 = tf.concat([s7, s8], 1)

x1 = tf.concat([y1, y2], 1)
x2 = tf.concat([y3, y4], 1)

u1 = tf.concat([x1, x2], 1)

RR = tf.reshape(u1,[batch_size,height,width,1])

# G channel (the same way like R channel above)
conv1_2 = tf.nn.conv2d(G_batch, kernel1_1, strides=[1, 1, 1, 1], padding='SAME')

kernel2_2 = tf.div(conv1_2,aaaa1)
kernel3_2 = kernel2_2 + gauss2
kernel4_2 = tf.multiply(kernel3_2,aaaa1)

conv5_2 = tf.nn.conv2d(kernel4_2, kernel5_1, strides=[1, 1, 1, 1], padding='SAME')

# kk = tf.reshape(conv5_2,[batch_size,1024,8,8])
########################################################修改
kk = tf.reshape(conv5_2,[batch_size,256,8,8])

kk1 = tf.concat([kk[:, 0, :, :], kk[:, 1, :, :]], 2)
kk2 = tf.concat([kk[:, 2, :, :], kk[:, 3, :, :]], 2)
kk3 = tf.concat([kk[:, 4, :, :], kk[:, 5, :, :]], 2)
kk4 = tf.concat([kk[:, 6, :, :], kk[:, 7, :, :]], 2)
kk5 = tf.concat([kk[:, 8, :, :], kk[:, 9, :, :]], 2)
kk6 = tf.concat([kk[:, 10, :, :], kk[:, 11, :, :]], 2)
kk7 = tf.concat([kk[:, 12, :, :], kk[:, 13, :, :]], 2)
kk8 = tf.concat([kk[:, 14, :, :], kk[:, 15, :, :]], 2)
kk9 = tf.concat([kk[:, 16, :, :], kk[:, 17, :, :]], 2)
kk10 = tf.concat([kk[:, 18, :, :], kk[:, 19, :, :]], 2)
kk11 = tf.concat([kk[:, 20, :, :], kk[:, 21, :, :]], 2)
kk12 = tf.concat([kk[:, 22, :, :], kk[:, 23, :, :]], 2)
kk13 = tf.concat([kk[:, 24, :, :], kk[:, 25, :, :]], 2)
kk14 = tf.concat([kk[:, 26, :, :], kk[:, 27, :, :]], 2)
kk15 = tf.concat([kk[:, 28, :, :], kk[:, 29, :, :]], 2)
kk16 = tf.concat([kk[:, 30, :, :], kk[:, 31, :, :]], 2)
kk17 = tf.concat([kk[:, 32, :, :], kk[:, 33, :, :]], 2)
kk18 = tf.concat([kk[:, 34, :, :], kk[:, 35, :, :]], 2)
kk19 = tf.concat([kk[:, 36, :, :], kk[:, 37, :, :]], 2)
kk20 = tf.concat([kk[:, 38, :, :], kk[:, 39, :, :]], 2)
kk21 = tf.concat([kk[:, 40, :, :], kk[:, 41, :, :]], 2)
kk22 = tf.concat([kk[:, 42, :, :], kk[:, 43, :, :]], 2)
kk23 = tf.concat([kk[:, 44, :, :], kk[:, 45, :, :]], 2)
kk24 = tf.concat([kk[:, 46, :, :], kk[:, 47, :, :]], 2)
kk25 = tf.concat([kk[:, 48, :, :], kk[:, 49, :, :]], 2)
kk26 = tf.concat([kk[:, 50, :, :], kk[:, 51, :, :]], 2)
kk27 = tf.concat([kk[:, 52, :, :], kk[:, 53, :, :]], 2)
kk28 = tf.concat([kk[:, 54, :, :], kk[:, 55, :, :]], 2)
kk29 = tf.concat([kk[:, 56, :, :], kk[:, 57, :, :]], 2)
kk30 = tf.concat([kk[:, 58, :, :], kk[:, 59, :, :]], 2)
kk31 = tf.concat([kk[:, 60, :, :], kk[:, 61, :, :]], 2)
kk32 = tf.concat([kk[:, 62, :, :], kk[:, 63, :, :]], 2)
kk33 = tf.concat([kk[:, 64, :, :], kk[:, 65, :, :]], 2)
kk34 = tf.concat([kk[:, 66, :, :], kk[:, 67, :, :]], 2)
kk35 = tf.concat([kk[:, 68, :, :], kk[:, 69, :, :]], 2)
kk36 = tf.concat([kk[:, 70, :, :], kk[:, 71, :, :]], 2)
kk37 = tf.concat([kk[:, 72, :, :], kk[:, 73, :, :]], 2)
kk38 = tf.concat([kk[:, 74, :, :], kk[:, 75, :, :]], 2)
kk39 = tf.concat([kk[:, 76, :, :], kk[:, 77, :, :]], 2)
kk40 = tf.concat([kk[:, 78, :, :], kk[:, 79, :, :]], 2)
kk41 = tf.concat([kk[:, 80, :, :], kk[:, 81, :, :]], 2)
kk42 = tf.concat([kk[:, 82, :, :], kk[:, 83, :, :]], 2)
kk43 = tf.concat([kk[:, 84, :, :], kk[:, 85, :, :]], 2)
kk44 = tf.concat([kk[:, 86, :, :], kk[:, 87, :, :]], 2)
kk45 = tf.concat([kk[:, 88, :, :], kk[:, 89, :, :]], 2)
kk46 = tf.concat([kk[:, 90, :, :], kk[:, 91, :, :]], 2)
kk47 = tf.concat([kk[:, 92, :, :], kk[:, 93, :, :]], 2)
kk48 = tf.concat([kk[:, 94, :, :], kk[:, 95, :, :]], 2)
kk49 = tf.concat([kk[:, 96, :, :], kk[:, 97, :, :]], 2)
kk50 = tf.concat([kk[:, 98, :, :], kk[:, 99, :, :]], 2)
kk51 = tf.concat([kk[:, 100, :, :], kk[:, 101, :, :]], 2)
kk52 = tf.concat([kk[:, 102, :, :], kk[:, 103, :, :]], 2)
kk53 = tf.concat([kk[:, 104, :, :], kk[:, 105, :, :]], 2)
kk54 = tf.concat([kk[:, 106, :, :], kk[:, 107, :, :]], 2)
kk55 = tf.concat([kk[:, 108, :, :], kk[:, 109, :, :]], 2)
kk56 = tf.concat([kk[:, 110, :, :], kk[:, 111, :, :]], 2)
kk57 = tf.concat([kk[:, 112, :, :], kk[:, 113, :, :]], 2)
kk58 = tf.concat([kk[:, 114, :, :], kk[:, 115, :, :]], 2)
kk59 = tf.concat([kk[:, 116, :, :], kk[:, 117, :, :]], 2)
kk60 = tf.concat([kk[:, 118, :, :], kk[:, 119, :, :]], 2)
kk61 = tf.concat([kk[:, 120, :, :], kk[:, 121, :, :]], 2)
kk62 = tf.concat([kk[:, 122, :, :], kk[:, 123, :, :]], 2)
kk63 = tf.concat([kk[:, 124, :, :], kk[:, 125, :, :]], 2)
kk64 = tf.concat([kk[:, 126, :, :], kk[:, 127, :, :]], 2)
kk65 = tf.concat([kk[:, 128, :, :], kk[:, 129, :, :]], 2)
kk66 = tf.concat([kk[:, 130, :, :], kk[:, 131, :, :]], 2)
kk67 = tf.concat([kk[:, 132, :, :], kk[:, 133, :, :]], 2)
kk68 = tf.concat([kk[:, 134, :, :], kk[:, 135, :, :]], 2)
kk69 = tf.concat([kk[:, 136, :, :], kk[:, 137, :, :]], 2)
kk70 = tf.concat([kk[:, 138, :, :], kk[:, 139, :, :]], 2)
kk71 = tf.concat([kk[:, 140, :, :], kk[:, 141, :, :]], 2)
kk72 = tf.concat([kk[:, 142, :, :], kk[:, 143, :, :]], 2)
kk73 = tf.concat([kk[:, 144, :, :], kk[:, 145, :, :]], 2)
kk74 = tf.concat([kk[:, 146, :, :], kk[:, 147, :, :]], 2)
kk75 = tf.concat([kk[:, 148, :, :], kk[:, 149, :, :]], 2)
kk76 = tf.concat([kk[:, 150, :, :], kk[:, 151, :, :]], 2)
kk77 = tf.concat([kk[:, 152, :, :], kk[:, 153, :, :]], 2)
kk78 = tf.concat([kk[:, 154, :, :], kk[:, 155, :, :]], 2)
kk79 = tf.concat([kk[:, 156, :, :], kk[:, 157, :, :]], 2)
kk80 = tf.concat([kk[:, 158, :, :], kk[:, 159, :, :]], 2)
kk81 = tf.concat([kk[:, 160, :, :], kk[:, 161, :, :]], 2)
kk82 = tf.concat([kk[:, 162, :, :], kk[:, 163, :, :]], 2)
kk83 = tf.concat([kk[:, 164, :, :], kk[:, 165, :, :]], 2)
kk84 = tf.concat([kk[:, 166, :, :], kk[:, 167, :, :]], 2)
kk85 = tf.concat([kk[:, 168, :, :], kk[:, 169, :, :]], 2)
kk86 = tf.concat([kk[:, 170, :, :], kk[:, 171, :, :]], 2)
kk87 = tf.concat([kk[:, 172, :, :], kk[:, 173, :, :]], 2)
kk88 = tf.concat([kk[:, 174, :, :], kk[:, 175, :, :]], 2)
kk89 = tf.concat([kk[:, 176, :, :], kk[:, 177, :, :]], 2)
kk90 = tf.concat([kk[:, 178, :, :], kk[:, 179, :, :]], 2)
kk91 = tf.concat([kk[:, 180, :, :], kk[:, 181, :, :]], 2)
kk92 = tf.concat([kk[:, 182, :, :], kk[:, 183, :, :]], 2)
kk93 = tf.concat([kk[:, 184, :, :], kk[:, 185, :, :]], 2)
kk94 = tf.concat([kk[:, 186, :, :], kk[:, 187, :, :]], 2)
kk95 = tf.concat([kk[:, 188, :, :], kk[:, 189, :, :]], 2)
kk96 = tf.concat([kk[:, 190, :, :], kk[:, 191, :, :]], 2)
kk97 = tf.concat([kk[:, 192, :, :], kk[:, 193, :, :]], 2)
kk98 = tf.concat([kk[:, 194, :, :], kk[:, 195, :, :]], 2)
kk99 = tf.concat([kk[:, 196, :, :], kk[:, 197, :, :]], 2)
kk100 = tf.concat([kk[:, 198, :, :], kk[:, 199, :, :]], 2)
kk101 = tf.concat([kk[:, 200, :, :], kk[:, 201, :, :]], 2)
kk102 = tf.concat([kk[:, 202, :, :], kk[:, 203, :, :]], 2)
kk103 = tf.concat([kk[:, 204, :, :], kk[:, 205, :, :]], 2)
kk104 = tf.concat([kk[:, 206, :, :], kk[:, 207, :, :]], 2)
kk105 = tf.concat([kk[:, 208, :, :], kk[:, 209, :, :]], 2)
kk106 = tf.concat([kk[:, 210, :, :], kk[:, 211, :, :]], 2)
kk107 = tf.concat([kk[:, 212, :, :], kk[:, 213, :, :]], 2)
kk108 = tf.concat([kk[:, 214, :, :], kk[:, 215, :, :]], 2)
kk109 = tf.concat([kk[:, 216, :, :], kk[:, 217, :, :]], 2)
kk110 = tf.concat([kk[:, 218, :, :], kk[:, 219, :, :]], 2)
kk111 = tf.concat([kk[:, 220, :, :], kk[:, 221, :, :]], 2)
kk112 = tf.concat([kk[:, 222, :, :], kk[:, 223, :, :]], 2)
kk113 = tf.concat([kk[:, 224, :, :], kk[:, 225, :, :]], 2)
kk114 = tf.concat([kk[:, 226, :, :], kk[:, 227, :, :]], 2)
kk115 = tf.concat([kk[:, 228, :, :], kk[:, 229, :, :]], 2)
kk116 = tf.concat([kk[:, 230, :, :], kk[:, 231, :, :]], 2)
kk117 = tf.concat([kk[:, 232, :, :], kk[:, 233, :, :]], 2)
kk118 = tf.concat([kk[:, 234, :, :], kk[:, 235, :, :]], 2)
kk119 = tf.concat([kk[:, 236, :, :], kk[:, 237, :, :]], 2)
kk120 = tf.concat([kk[:, 238, :, :], kk[:, 239, :, :]], 2)
kk121 = tf.concat([kk[:, 240, :, :], kk[:, 241, :, :]], 2)
kk122 = tf.concat([kk[:, 242, :, :], kk[:, 243, :, :]], 2)
kk123 = tf.concat([kk[:, 244, :, :], kk[:, 245, :, :]], 2)
kk124 = tf.concat([kk[:, 246, :, :], kk[:, 247, :, :]], 2)
kk125 = tf.concat([kk[:, 248, :, :], kk[:, 249, :, :]], 2)
kk126 = tf.concat([kk[:, 250, :, :], kk[:, 251, :, :]], 2)
kk127 = tf.concat([kk[:, 252, :, :], kk[:, 253, :, :]], 2)
kk128 = tf.concat([kk[:, 254, :, :], kk[:, 255, :, :]], 2)

mm1 = tf.concat([kk1, kk2], 2)
mm2 = tf.concat([kk3, kk4], 2)
mm3 = tf.concat([kk5, kk6], 2)
mm4 = tf.concat([kk7, kk8], 2)
mm5 = tf.concat([kk9, kk10], 2)
mm6 = tf.concat([kk11, kk12], 2)
mm7 = tf.concat([kk13, kk14], 2)
mm8 = tf.concat([kk15, kk16], 2)
mm9 = tf.concat([kk17, kk18], 2)
mm10 = tf.concat([kk19, kk20], 2)
mm11 = tf.concat([kk21, kk22], 2)
mm12 = tf.concat([kk23, kk24], 2)
mm13 = tf.concat([kk25, kk26], 2)
mm14 = tf.concat([kk27, kk28], 2)
mm15 = tf.concat([kk29, kk30], 2)
mm16 = tf.concat([kk31, kk32], 2)
mm17 = tf.concat([kk33, kk34], 2)
mm18 = tf.concat([kk35, kk36], 2)
mm19 = tf.concat([kk37, kk38], 2)
mm20 = tf.concat([kk39, kk40], 2)
mm21 = tf.concat([kk41, kk42], 2)
mm22 = tf.concat([kk43, kk44], 2)
mm23 = tf.concat([kk45, kk46], 2)
mm24 = tf.concat([kk47, kk48], 2)
mm25 = tf.concat([kk49, kk50], 2)
mm26 = tf.concat([kk51, kk52], 2)
mm27 = tf.concat([kk53, kk54], 2)
mm28 = tf.concat([kk55, kk56], 2)
mm29 = tf.concat([kk57, kk58], 2)
mm30 = tf.concat([kk59, kk60], 2)
mm31 = tf.concat([kk61, kk62], 2)
mm32 = tf.concat([kk63, kk64], 2)
mm33 = tf.concat([kk65, kk66], 2)
mm34 = tf.concat([kk67, kk68], 2)
mm35 = tf.concat([kk69, kk70], 2)
mm36 = tf.concat([kk71, kk72], 2)
mm37 = tf.concat([kk73, kk74], 2)
mm38 = tf.concat([kk75, kk76], 2)
mm39 = tf.concat([kk77, kk78], 2)
mm40 = tf.concat([kk79, kk80], 2)
mm41 = tf.concat([kk81, kk82], 2)
mm42 = tf.concat([kk83, kk84], 2)
mm43 = tf.concat([kk85, kk86], 2)
mm44 = tf.concat([kk87, kk88], 2)
mm45 = tf.concat([kk89, kk90], 2)
mm46 = tf.concat([kk91, kk92], 2)
mm47 = tf.concat([kk93, kk94], 2)
mm48 = tf.concat([kk95, kk96], 2)
mm49 = tf.concat([kk97, kk98], 2)
mm50 = tf.concat([kk99, kk100], 2)
mm51 = tf.concat([kk101, kk102], 2)
mm52 = tf.concat([kk103, kk104], 2)
mm53 = tf.concat([kk105, kk106], 2)
mm54 = tf.concat([kk107, kk108], 2)
mm55 = tf.concat([kk109, kk110], 2)
mm56 = tf.concat([kk111, kk112], 2)
mm57 = tf.concat([kk113, kk114], 2)
mm58 = tf.concat([kk115, kk116], 2)
mm59 = tf.concat([kk117, kk118], 2)
mm60 = tf.concat([kk119, kk120], 2)
mm61 = tf.concat([kk121, kk122], 2)
mm62 = tf.concat([kk123, kk124], 2)
mm63 = tf.concat([kk125, kk126], 2)
mm64 = tf.concat([kk127, kk128], 2)

nn1 = tf.concat([mm1, mm2], 2)
nn2 = tf.concat([mm3, mm4], 2)
nn3 = tf.concat([mm5, mm6], 2)
nn4 = tf.concat([mm7, mm8], 2)
nn5 = tf.concat([mm9, mm10], 2)
nn6 = tf.concat([mm11, mm12], 2)
nn7 = tf.concat([mm13, mm14], 2)
nn8 = tf.concat([mm15, mm16], 2)
nn9 = tf.concat([mm17, mm18], 2)
nn10 = tf.concat([mm19, mm20], 2)
nn11 = tf.concat([mm21, mm22], 2)
nn12 = tf.concat([mm23, mm24], 2)
nn13 = tf.concat([mm25, mm26], 2)
nn14 = tf.concat([mm27, mm28], 2)
nn15 = tf.concat([mm29, mm30], 2)
nn16 = tf.concat([mm31, mm32], 2)
nn17 = tf.concat([mm33, mm34], 2)
nn18 = tf.concat([mm35, mm36], 2)
nn19 = tf.concat([mm37, mm38], 2)
nn20 = tf.concat([mm39, mm40], 2)
nn21 = tf.concat([mm41, mm42], 2)
nn22 = tf.concat([mm43, mm44], 2)
nn23 = tf.concat([mm45, mm46], 2)
nn24 = tf.concat([mm47, mm48], 2)
nn25 = tf.concat([mm49, mm50], 2)
nn26 = tf.concat([mm51, mm52], 2)
nn27 = tf.concat([mm53, mm54], 2)
nn28 = tf.concat([mm55, mm56], 2)
nn29 = tf.concat([mm57, mm58], 2)
nn30 = tf.concat([mm59, mm60], 2)
nn31 = tf.concat([mm61, mm62], 2)
nn32 = tf.concat([mm63, mm64], 2)

pp1 = tf.concat([nn1, nn2], 2)
pp2 = tf.concat([nn3, nn4], 2)
pp3 = tf.concat([nn5, nn6], 2)
pp4 = tf.concat([nn7, nn8], 2)
pp5 = tf.concat([nn9, nn10], 2)
pp6 = tf.concat([nn11, nn12], 2)
pp7 = tf.concat([nn13, nn14], 2)
pp8 = tf.concat([nn15, nn16], 2)
pp9 = tf.concat([nn17, nn18], 2)
pp10 = tf.concat([nn19, nn20], 2)
pp11 = tf.concat([nn21, nn22], 2)
pp12 = tf.concat([nn23, nn24], 2)
pp13 = tf.concat([nn25, nn26], 2)
pp14 = tf.concat([nn27, nn28], 2)
pp15 = tf.concat([nn29, nn30], 2)
pp16 = tf.concat([nn31, nn32], 2)

qq1 = tf.concat([pp1, pp2], 1)
qq2 = tf.concat([pp3, pp4], 1)
qq3 = tf.concat([pp5, pp6], 1)
qq4 = tf.concat([pp7, pp8], 1)
qq5 = tf.concat([pp9, pp10], 1)
qq6 = tf.concat([pp11, pp12], 1)
qq7 = tf.concat([pp13, pp14], 1)
qq8 = tf.concat([pp15, pp16], 1)

rr1 = tf.concat([qq1, qq2], 1)
rr2 = tf.concat([qq3, qq4], 1)
rr3 = tf.concat([qq5, qq6], 1)
rr4 = tf.concat([qq7, qq8], 1)

ss1 = tf.concat([rr1, rr2], 1)
ss2 = tf.concat([rr3, rr4], 1)

uu1 = tf.concat([ss1, ss2], 1)

# GG = tf.reshape(uu1,[batch_size,height,width,1])
GG = tf.reshape(uu1,[batch_size,128,128,1])

#B channel (the same way like R channel above)
conv1_3 = tf.nn.conv2d(B_batch, kernel1_1, strides=[1, 1, 1, 1], padding='SAME')

kernel2_3 = tf.div(conv1_3,aaaa1)
kernel3_3 = kernel2_3 + gauss2
kernel4_3 = tf.multiply(kernel3_3,aaaa1)

conv5_3 = tf.nn.conv2d(kernel4_3, kernel5_1, strides=[1, 1, 1, 1], padding='SAME')


kkk = tf.reshape(conv5_3,[batch_size,256,8,8])

kkk1 = tf.concat([kkk[:, 0, :, :], kkk[:, 1, :, :]], 2)
kkk2 = tf.concat([kkk[:, 2, :, :], kkk[:, 3, :, :]], 2)
kkk3 = tf.concat([kkk[:, 4, :, :], kkk[:, 5, :, :]], 2)
kkk4 = tf.concat([kkk[:, 6, :, :], kkk[:, 7, :, :]], 2)
kkk5 = tf.concat([kkk[:, 8, :, :], kkk[:, 9, :, :]], 2)
kkk6 = tf.concat([kkk[:, 10, :, :], kkk[:, 11, :, :]], 2)
kkk7 = tf.concat([kkk[:, 12, :, :], kkk[:, 13, :, :]], 2)
kkk8 = tf.concat([kkk[:, 14, :, :], kkk[:, 15, :, :]], 2)
kkk9 = tf.concat([kkk[:, 16, :, :], kkk[:, 17, :, :]], 2)
kkk10 = tf.concat([kkk[:, 18, :, :], kkk[:, 19, :, :]], 2)
kkk11 = tf.concat([kkk[:, 20, :, :], kkk[:, 21, :, :]], 2)
kkk12 = tf.concat([kkk[:, 22, :, :], kkk[:, 23, :, :]], 2)
kkk13 = tf.concat([kkk[:, 24, :, :], kkk[:, 25, :, :]], 2)
kkk14 = tf.concat([kkk[:, 26, :, :], kkk[:, 27, :, :]], 2)
kkk15 = tf.concat([kkk[:, 28, :, :], kkk[:, 29, :, :]], 2)
kkk16 = tf.concat([kkk[:, 30, :, :], kkk[:, 31, :, :]], 2)
kkk17 = tf.concat([kkk[:, 32, :, :], kkk[:, 33, :, :]], 2)
kkk18 = tf.concat([kkk[:, 34, :, :], kkk[:, 35, :, :]], 2)
kkk19 = tf.concat([kkk[:, 36, :, :], kkk[:, 37, :, :]], 2)
kkk20 = tf.concat([kkk[:, 38, :, :], kkk[:, 39, :, :]], 2)
kkk21 = tf.concat([kkk[:, 40, :, :], kkk[:, 41, :, :]], 2)
kkk22 = tf.concat([kkk[:, 42, :, :], kkk[:, 43, :, :]], 2)
kkk23 = tf.concat([kkk[:, 44, :, :], kkk[:, 45, :, :]], 2)
kkk24 = tf.concat([kkk[:, 46, :, :], kkk[:, 47, :, :]], 2)
kkk25 = tf.concat([kkk[:, 48, :, :], kkk[:, 49, :, :]], 2)
kkk26 = tf.concat([kkk[:, 50, :, :], kkk[:, 51, :, :]], 2)
kkk27 = tf.concat([kkk[:, 52, :, :], kkk[:, 53, :, :]], 2)
kkk28 = tf.concat([kkk[:, 54, :, :], kkk[:, 55, :, :]], 2)
kkk29 = tf.concat([kkk[:, 56, :, :], kkk[:, 57, :, :]], 2)
kkk30 = tf.concat([kkk[:, 58, :, :], kkk[:, 59, :, :]], 2)
kkk31 = tf.concat([kkk[:, 60, :, :], kkk[:, 61, :, :]], 2)
kkk32 = tf.concat([kkk[:, 62, :, :], kkk[:, 63, :, :]], 2)
kkk33 = tf.concat([kkk[:, 64, :, :], kkk[:, 65, :, :]], 2)
kkk34 = tf.concat([kkk[:, 66, :, :], kkk[:, 67, :, :]], 2)
kkk35 = tf.concat([kkk[:, 68, :, :], kkk[:, 69, :, :]], 2)
kkk36 = tf.concat([kkk[:, 70, :, :], kkk[:, 71, :, :]], 2)
kkk37 = tf.concat([kkk[:, 72, :, :], kkk[:, 73, :, :]], 2)
kkk38 = tf.concat([kkk[:, 74, :, :], kkk[:, 75, :, :]], 2)
kkk39 = tf.concat([kkk[:, 76, :, :], kkk[:, 77, :, :]], 2)
kkk40 = tf.concat([kkk[:, 78, :, :], kkk[:, 79, :, :]], 2)
kkk41 = tf.concat([kkk[:, 80, :, :], kkk[:, 81, :, :]], 2)
kkk42 = tf.concat([kkk[:, 82, :, :], kkk[:, 83, :, :]], 2)
kkk43 = tf.concat([kkk[:, 84, :, :], kkk[:, 85, :, :]], 2)
kkk44 = tf.concat([kkk[:, 86, :, :], kkk[:, 87, :, :]], 2)
kkk45 = tf.concat([kkk[:, 88, :, :], kkk[:, 89, :, :]], 2)
kkk46 = tf.concat([kkk[:, 90, :, :], kkk[:, 91, :, :]], 2)
kkk47 = tf.concat([kkk[:, 92, :, :], kkk[:, 93, :, :]], 2)
kkk48 = tf.concat([kkk[:, 94, :, :], kkk[:, 95, :, :]], 2)
kkk49 = tf.concat([kkk[:, 96, :, :], kkk[:, 97, :, :]], 2)
kkk50 = tf.concat([kkk[:, 98, :, :], kkk[:, 99, :, :]], 2)
kkk51 = tf.concat([kkk[:, 100, :, :], kkk[:, 101, :, :]], 2)
kkk52 = tf.concat([kkk[:, 102, :, :], kkk[:, 103, :, :]], 2)
kkk53 = tf.concat([kkk[:, 104, :, :], kkk[:, 105, :, :]], 2)
kkk54 = tf.concat([kkk[:, 106, :, :], kkk[:, 107, :, :]], 2)
kkk55 = tf.concat([kkk[:, 108, :, :], kkk[:, 109, :, :]], 2)
kkk56 = tf.concat([kkk[:, 110, :, :], kkk[:, 111, :, :]], 2)
kkk57 = tf.concat([kkk[:, 112, :, :], kkk[:, 113, :, :]], 2)
kkk58 = tf.concat([kkk[:, 114, :, :], kkk[:, 115, :, :]], 2)
kkk59 = tf.concat([kkk[:, 116, :, :], kkk[:, 117, :, :]], 2)
kkk60 = tf.concat([kkk[:, 118, :, :], kkk[:, 119, :, :]], 2)
kkk61 = tf.concat([kkk[:, 120, :, :], kkk[:, 121, :, :]], 2)
kkk62 = tf.concat([kkk[:, 122, :, :], kkk[:, 123, :, :]], 2)
kkk63 = tf.concat([kkk[:, 124, :, :], kkk[:, 125, :, :]], 2)
kkk64 = tf.concat([kkk[:, 126, :, :], kkk[:, 127, :, :]], 2)
kkk65 = tf.concat([kkk[:, 128, :, :], kkk[:, 129, :, :]], 2)
kkk66 = tf.concat([kkk[:, 130, :, :], kkk[:, 131, :, :]], 2)
kkk67 = tf.concat([kkk[:, 132, :, :], kkk[:, 133, :, :]], 2)
kkk68 = tf.concat([kkk[:, 134, :, :], kkk[:, 135, :, :]], 2)
kkk69 = tf.concat([kkk[:, 136, :, :], kkk[:, 137, :, :]], 2)
kkk70 = tf.concat([kkk[:, 138, :, :], kkk[:, 139, :, :]], 2)
kkk71 = tf.concat([kkk[:, 140, :, :], kkk[:, 141, :, :]], 2)
kkk72 = tf.concat([kkk[:, 142, :, :], kkk[:, 143, :, :]], 2)
kkk73 = tf.concat([kkk[:, 144, :, :], kkk[:, 145, :, :]], 2)
kkk74 = tf.concat([kkk[:, 146, :, :], kkk[:, 147, :, :]], 2)
kkk75 = tf.concat([kkk[:, 148, :, :], kkk[:, 149, :, :]], 2)
kkk76 = tf.concat([kkk[:, 150, :, :], kkk[:, 151, :, :]], 2)
kkk77 = tf.concat([kkk[:, 152, :, :], kkk[:, 153, :, :]], 2)
kkk78 = tf.concat([kkk[:, 154, :, :], kkk[:, 155, :, :]], 2)
kkk79 = tf.concat([kkk[:, 156, :, :], kkk[:, 157, :, :]], 2)
kkk80 = tf.concat([kkk[:, 158, :, :], kkk[:, 159, :, :]], 2)
kkk81 = tf.concat([kkk[:, 160, :, :], kkk[:, 161, :, :]], 2)
kkk82 = tf.concat([kkk[:, 162, :, :], kkk[:, 163, :, :]], 2)
kkk83 = tf.concat([kkk[:, 164, :, :], kkk[:, 165, :, :]], 2)
kkk84 = tf.concat([kkk[:, 166, :, :], kkk[:, 167, :, :]], 2)
kkk85 = tf.concat([kkk[:, 168, :, :], kkk[:, 169, :, :]], 2)
kkk86 = tf.concat([kkk[:, 170, :, :], kkk[:, 171, :, :]], 2)
kkk87 = tf.concat([kkk[:, 172, :, :], kkk[:, 173, :, :]], 2)
kkk88 = tf.concat([kkk[:, 174, :, :], kkk[:, 175, :, :]], 2)
kkk89 = tf.concat([kkk[:, 176, :, :], kkk[:, 177, :, :]], 2)
kkk90 = tf.concat([kkk[:, 178, :, :], kkk[:, 179, :, :]], 2)
kkk91 = tf.concat([kkk[:, 180, :, :], kkk[:, 181, :, :]], 2)
kkk92 = tf.concat([kkk[:, 182, :, :], kkk[:, 183, :, :]], 2)
kkk93 = tf.concat([kkk[:, 184, :, :], kkk[:, 185, :, :]], 2)
kkk94 = tf.concat([kkk[:, 186, :, :], kkk[:, 187, :, :]], 2)
kkk95 = tf.concat([kkk[:, 188, :, :], kkk[:, 189, :, :]], 2)
kkk96 = tf.concat([kkk[:, 190, :, :], kkk[:, 191, :, :]], 2)
kkk97 = tf.concat([kkk[:, 192, :, :], kkk[:, 193, :, :]], 2)
kkk98 = tf.concat([kkk[:, 194, :, :], kkk[:, 195, :, :]], 2)
kkk99 = tf.concat([kkk[:, 196, :, :], kkk[:, 197, :, :]], 2)
kkk100 = tf.concat([kkk[:, 198, :, :], kkk[:, 199, :, :]], 2)
kkk101 = tf.concat([kkk[:, 200, :, :], kkk[:, 201, :, :]], 2)
kkk102 = tf.concat([kkk[:, 202, :, :], kkk[:, 203, :, :]], 2)
kkk103 = tf.concat([kkk[:, 204, :, :], kkk[:, 205, :, :]], 2)
kkk104 = tf.concat([kkk[:, 206, :, :], kkk[:, 207, :, :]], 2)
kkk105 = tf.concat([kkk[:, 208, :, :], kkk[:, 209, :, :]], 2)
kkk106 = tf.concat([kkk[:, 210, :, :], kkk[:, 211, :, :]], 2)
kkk107 = tf.concat([kkk[:, 212, :, :], kkk[:, 213, :, :]], 2)
kkk108 = tf.concat([kkk[:, 214, :, :], kkk[:, 215, :, :]], 2)
kkk109 = tf.concat([kkk[:, 216, :, :], kkk[:, 217, :, :]], 2)
kkk110 = tf.concat([kkk[:, 218, :, :], kkk[:, 219, :, :]], 2)
kkk111 = tf.concat([kkk[:, 220, :, :], kkk[:, 221, :, :]], 2)
kkk112 = tf.concat([kkk[:, 222, :, :], kkk[:, 223, :, :]], 2)
kkk113 = tf.concat([kkk[:, 224, :, :], kkk[:, 225, :, :]], 2)
kkk114 = tf.concat([kkk[:, 226, :, :], kkk[:, 227, :, :]], 2)
kkk115 = tf.concat([kkk[:, 228, :, :], kkk[:, 229, :, :]], 2)
kkk116 = tf.concat([kkk[:, 230, :, :], kkk[:, 231, :, :]], 2)
kkk117 = tf.concat([kkk[:, 232, :, :], kkk[:, 233, :, :]], 2)
kkk118 = tf.concat([kkk[:, 234, :, :], kkk[:, 235, :, :]], 2)
kkk119 = tf.concat([kkk[:, 236, :, :], kkk[:, 237, :, :]], 2)
kkk120 = tf.concat([kkk[:, 238, :, :], kkk[:, 239, :, :]], 2)
kkk121 = tf.concat([kkk[:, 240, :, :], kkk[:, 241, :, :]], 2)
kkk122 = tf.concat([kkk[:, 242, :, :], kkk[:, 243, :, :]], 2)
kkk123 = tf.concat([kkk[:, 244, :, :], kkk[:, 245, :, :]], 2)
kkk124 = tf.concat([kkk[:, 246, :, :], kkk[:, 247, :, :]], 2)
kkk125 = tf.concat([kkk[:, 248, :, :], kkk[:, 249, :, :]], 2)
kkk126 = tf.concat([kkk[:, 250, :, :], kkk[:, 251, :, :]], 2)
kkk127 = tf.concat([kkk[:, 252, :, :], kkk[:, 253, :, :]], 2)
kkk128 = tf.concat([kkk[:, 254, :, :], kkk[:, 255, :, :]], 2)

mmm1 = tf.concat([kkk1, kkk2], 2)
mmm2 = tf.concat([kkk3, kkk4], 2)
mmm3 = tf.concat([kkk5, kkk6], 2)
mmm4 = tf.concat([kkk7, kkk8], 2)
mmm5 = tf.concat([kkk9, kkk10], 2)
mmm6 = tf.concat([kkk11, kkk12], 2)
mmm7 = tf.concat([kkk13, kkk14], 2)
mmm8 = tf.concat([kkk15, kkk16], 2)
mmm9 = tf.concat([kkk17, kkk18], 2)
mmm10 = tf.concat([kkk19, kkk20], 2)
mmm11 = tf.concat([kkk21, kkk22], 2)
mmm12 = tf.concat([kkk23, kkk24], 2)
mmm13 = tf.concat([kkk25, kkk26], 2)
mmm14 = tf.concat([kkk27, kkk28], 2)
mmm15 = tf.concat([kkk29, kkk30], 2)
mmm16 = tf.concat([kkk31, kkk32], 2)
mmm17 = tf.concat([kkk33, kkk34], 2)
mmm18 = tf.concat([kkk35, kkk36], 2)
mmm19 = tf.concat([kkk37, kkk38], 2)
mmm20 = tf.concat([kkk39, kkk40], 2)
mmm21 = tf.concat([kkk41, kkk42], 2)
mmm22 = tf.concat([kkk43, kkk44], 2)
mmm23 = tf.concat([kkk45, kkk46], 2)
mmm24 = tf.concat([kkk47, kkk48], 2)
mmm25 = tf.concat([kkk49, kkk50], 2)
mmm26 = tf.concat([kkk51, kkk52], 2)
mmm27 = tf.concat([kkk53, kkk54], 2)
mmm28 = tf.concat([kkk55, kkk56], 2)
mmm29 = tf.concat([kkk57, kkk58], 2)
mmm30 = tf.concat([kkk59, kkk60], 2)
mmm31 = tf.concat([kkk61, kkk62], 2)
mmm32 = tf.concat([kkk63, kkk64], 2)
mmm33 = tf.concat([kkk65, kkk66], 2)
mmm34 = tf.concat([kkk67, kkk68], 2)
mmm35 = tf.concat([kkk69, kkk70], 2)
mmm36 = tf.concat([kkk71, kkk72], 2)
mmm37 = tf.concat([kkk73, kkk74], 2)
mmm38 = tf.concat([kkk75, kkk76], 2)
mmm39 = tf.concat([kkk77, kkk78], 2)
mmm40 = tf.concat([kkk79, kkk80], 2)
mmm41 = tf.concat([kkk81, kkk82], 2)
mmm42 = tf.concat([kkk83, kkk84], 2)
mmm43 = tf.concat([kkk85, kkk86], 2)
mmm44 = tf.concat([kkk87, kkk88], 2)
mmm45 = tf.concat([kkk89, kkk90], 2)
mmm46 = tf.concat([kkk91, kkk92], 2)
mmm47 = tf.concat([kkk93, kkk94], 2)
mmm48 = tf.concat([kkk95, kkk96], 2)
mmm49 = tf.concat([kkk97, kkk98], 2)
mmm50 = tf.concat([kkk99, kkk100], 2)
mmm51 = tf.concat([kkk101, kkk102], 2)
mmm52 = tf.concat([kkk103, kkk104], 2)
mmm53 = tf.concat([kkk105, kkk106], 2)
mmm54 = tf.concat([kkk107, kkk108], 2)
mmm55 = tf.concat([kkk109, kkk110], 2)
mmm56 = tf.concat([kkk111, kkk112], 2)
mmm57 = tf.concat([kkk113, kkk114], 2)
mmm58 = tf.concat([kkk115, kkk116], 2)
mmm59 = tf.concat([kkk117, kkk118], 2)
mmm60 = tf.concat([kkk119, kkk120], 2)
mmm61 = tf.concat([kkk121, kkk122], 2)
mmm62 = tf.concat([kkk123, kkk124], 2)
mmm63 = tf.concat([kkk125, kkk126], 2)
mmm64 = tf.concat([kkk127, kkk128], 2)

nnn1 = tf.concat([mmm1, mmm2], 2)
nnn2 = tf.concat([mmm3, mmm4], 2)
nnn3 = tf.concat([mmm5, mmm6], 2)
nnn4 = tf.concat([mmm7, mmm8], 2)
nnn5 = tf.concat([mmm9, mmm10], 2)
nnn6 = tf.concat([mmm11, mmm12], 2)
nnn7 = tf.concat([mmm13, mmm14], 2)
nnn8 = tf.concat([mmm15, mmm16], 2)
nnn9 = tf.concat([mmm17, mmm18], 2)
nnn10 = tf.concat([mmm19, mmm20], 2)
nnn11 = tf.concat([mmm21, mmm22], 2)
nnn12 = tf.concat([mmm23, mmm24], 2)
nnn13 = tf.concat([mmm25, mmm26], 2)
nnn14 = tf.concat([mmm27, mmm28], 2)
nnn15 = tf.concat([mmm29, mmm30], 2)
nnn16 = tf.concat([mmm31, mmm32], 2)
nnn17 = tf.concat([mmm33, mmm34], 2)
nnn18 = tf.concat([mmm35, mmm36], 2)
nnn19 = tf.concat([mmm37, mmm38], 2)
nnn20 = tf.concat([mmm39, mmm40], 2)
nnn21 = tf.concat([mmm41, mmm42], 2)
nnn22 = tf.concat([mmm43, mmm44], 2)
nnn23 = tf.concat([mmm45, mmm46], 2)
nnn24 = tf.concat([mmm47, mmm48], 2)
nnn25 = tf.concat([mmm49, mmm50], 2)
nnn26 = tf.concat([mmm51, mmm52], 2)
nnn27 = tf.concat([mmm53, mmm54], 2)
nnn28 = tf.concat([mmm55, mmm56], 2)
nnn29 = tf.concat([mmm57, mmm58], 2)
nnn30 = tf.concat([mmm59, mmm60], 2)
nnn31 = tf.concat([mmm61, mmm62], 2)
nnn32 = tf.concat([mmm63, mmm64], 2)

ppp1 = tf.concat([nnn1, nnn2], 2)
ppp2 = tf.concat([nnn3, nnn4], 2)
ppp3 = tf.concat([nnn5, nnn6], 2)
ppp4 = tf.concat([nnn7, nnn8], 2)
ppp5 = tf.concat([nnn9, nnn10], 2)
ppp6 = tf.concat([nnn11, nnn12], 2)
ppp7 = tf.concat([nnn13, nnn14], 2)
ppp8 = tf.concat([nnn15, nnn16], 2)
ppp9 = tf.concat([nnn17, nnn18], 2)
ppp10 = tf.concat([nnn19, nnn20], 2)
ppp11 = tf.concat([nnn21, nnn22], 2)
ppp12 = tf.concat([nnn23, nnn24], 2)
ppp13 = tf.concat([nnn25, nnn26], 2)
ppp14 = tf.concat([nnn27, nnn28], 2)
ppp15 = tf.concat([nnn29, nnn30], 2)
ppp16 = tf.concat([nnn31, nnn32], 2)

qqq1 = tf.concat([ppp1, ppp2], 1)
qqq2 = tf.concat([ppp3, ppp4], 1)
qqq3 = tf.concat([ppp5, ppp6], 1)
qqq4 = tf.concat([ppp7, ppp8], 1)
qqq5 = tf.concat([ppp9, ppp10], 1)
qqq6 = tf.concat([ppp11, ppp12], 1)
qqq7 = tf.concat([ppp13, ppp14], 1)
qqq8 = tf.concat([ppp15, ppp16], 1)

rrr1 = tf.concat([qqq1, qqq2], 1)
rrr2 = tf.concat([qqq3, qqq4], 1)
rrr3 = tf.concat([qqq5, qqq6], 1)
rrr4 = tf.concat([qqq7, qqq8], 1)

sss1 = tf.concat([rrr1, rrr2], 1)
sss2 = tf.concat([rrr3, rrr4], 1)

uuu1 = tf.concat([sss1, sss2], 1)

BB = tf.reshape(uuu1,[batch_size,128,128,1])

# simulating unsampling
# ra = tf.image.crop_to_bounding_box(GG, 0, 0, 128, 128)
rrrcb_mask = tf.image.resize_images(GG, [256, 256], method=2)
# # rb = tf.image.crop_to_bounding_box(BB, 0, 0, 128, 128)
rrrcr_mask = tf.image.resize_images(BB, [256, 256], method=2)

# kernelfcyg = get_weight('kernelfcyg',[1, 1, 1, 1])
# rrrcb_mask= tf.nn.conv2d_transpose(GG, kernelfcyg, output_shape=[batch_size,256,256,1],strides=[1, 2, 2, 1], padding='SAME', data_format="NHWC")
# kernelfcyb = get_weight('kernelfcyb',[1, 1, 1, 1])
# rrrcr_mask= tf.nn.conv2d_transpose(BB, kernelfcyb, output_shape=[batch_size,256,256,1],strides=[1, 2, 2, 1], padding='SAME', data_format="NHWC")

# YCBCR TO RGB according to ITU standard
RRR_new = RR + 1.402 * (rrrcr_mask-128)
RRR_new1 = tf.maximum(RRR_new,0)
RRR = tf.minimum(RRR_new1,255)

GGG_new =RR - 0.3441*(rrrcb_mask-128) - 0.7141*(rrrcr_mask-128)
GGG_new1 = tf.maximum(GGG_new,0)
GGG = tf.minimum(GGG_new1,255)

BBB_new = RR + 1.772 *(rrrcb_mask-128)
BBB_new1 = tf.maximum(BBB_new,0)
BBB = tf.minimum(BBB_new1,255)

RG = tf.concat([RRR, GGG], 3)
Oe = tf.concat([RG, BBB], 3)

# loss function
loss=tf.reduce_mean(tf.square(Ig-Oe))
tf.add_to_collection('losses', loss)
loss = tf.add_n(tf.get_collection('losses'))
train_op=tf.train.AdamOptimizer(lr).minimize(loss)

train_data_x1 = np.zeros([batch_size, height, width, 3], dtype=np.float32)
train_data_x2 = np.zeros([batch_size, height, width, 3], dtype=np.float32)

saver = tf.train.Saver()
sess = tf.Session()

########################################################################################3
sess.run(tf.global_variables_initializer())
ckpt = tf.train.get_checkpoint_state(logs_train_dir)
# ckpt = tf.train.get_checkpoint_state(checkpoint_dir='/home/amax/wyq/jpegmoni/60/60model2')
# saver.restore(sess, ckpt.model_checkpoint_path)

train_count = 0
for step in range(TRAIN_MAX_STEPS):
    for j in range(batch_size):
        train_count = train_count % num_train_sample
        train_imc1 = ndimage.imread(train_imList1[train_count])
        train_imc2 = ndimage.imread(train_imList2[train_count])

        train_data_x1[j,:,:,:] = train_imc1
        train_data_x2[j,:,:,:] = train_imc2

        train_count = train_count + 1

    _, tra_loss = sess.run([train_op, loss], feed_dict={Ih:train_data_x1, Ig:train_data_x2})

    if (step + 1) % 10 == 0:
        print('Step %d, train loss = %.5f' %(step+1, tra_loss))

    if (step + 1) % 5000 == 0:
        checkpoint_path = os.path.join(logs_train_dir, 'model.ckpt')
        saver.save(sess, checkpoint_path, global_step=step+1)
sess.close()
